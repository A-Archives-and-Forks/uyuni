#!/root/testenv/bin/python
#/usr/bin/python3

## purpose: creates new spacewalk accounts for users in a specific LDAP
##          group, removes spacewalk accounts after deleting users from a
##          specific LDAP group
## copyright: B1 Systems GmbH <info@b1-systems.de>, 2011.
## license: GPLv3+, http://www.gnu.org/licenses/gpl-3.0.html
## author: Christian Berendt <berendt@b1-systems.de>, 2011.

import logging
import ldap
import yaml
import sys

MODE = "ad"  # "ad" for Active Directiry or "ldap"

try:
    import xmlrpclib
except ImportError:
    import xmlrpc.client as xmlrpclib  # pylint: disable=F0401

logging.basicConfig(
    filename = "/var/log/sw-ldap-user-sync.log",
    filemode = "a",
    format = "%(asctime)s [%(levelname)-8s] %(message)s",
    level = logging.DEBUG
)

settings = yaml.load(open("/etc/rhn/sw-ldap-user-sync.conf"))

try:
    directory = ldap.initialize(settings["directory"]["url"])
    directory.simple_bind_s(settings["directory"]["user"],
                        settings["directory"]["password"])
except Exception as e:
    logging.error("unable to connect to LDAP server: %s" % e)
    sys.exit(1)

try:
    spacewalk = xmlrpclib.Server(settings["spacewalk"]["url"], verbose=0)
    spacewalk_token = spacewalk.auth.login(settings["spacewalk"]["user"],
        settings["spacewalk"]["password"])
except Exception as e:
    logging.error("unable to connect to spacewalk server: %s" % e)
    sys.exit(1)

if MODE == "ad":
    ldap_filter = '(objectclass=group)'
else:
    ldap_filter = '(objectclass=groupOfNames)'

attrs = ['member']

try:
    result = spacewalk.user.list_users(spacewalk_token)
except Exception as e:
    logging.error("unable to fetch user accounts from spacewalk server: %s" % e)
    sys.exit(1)

users = {}
for user in result:
    detail = spacewalk.user.getDetails(spacewalk_token, user.get('login'))
    if user.get('use_pam'):
        users[user.get('login')] = 1

try:
    dn, data = directory.search_s(settings["directory"]["group"], ldap.SCOPE_SUBTREE, ldap_filter, attrs)[0]
    for k in data:
        buff = []
        for e in data[k]:
            buff.append(e.decode("utf-8"))
        data[k] = buff

except Exception as e:
    logging.error("unable to fetch user entries from LDAP group: %s" % e)
    sys.exit(1)


if MODE == "ad":
    ldap_filter = "(objectclass=user)"
else:
    ldap_filter = "(objectclass=posixAccount)"
attrs = ['givenName', 'sn', 'mail', 'uid']

for uid in data['member']:
    try:
        userdn, userdata = directory.search_s(uid, ldap.SCOPE_SUBTREE, ldap_filter, attrs)[0]

        is_valid = True
        for attr in attrs:
            if attr not in userdata:
                logging.error("Skipping user: %s", str(userdn))
                logging.error("Attribute %s is missing", attr)
                is_valid = False
                break

        if not is_valid:
            continue

        luser_id = userdata["uid"][0].decode("utf-8")
        lgiven_name = userdata["givenName"][0].decode("utf-8")
        lsecond_name = "sn" in userdata and userdata["sn"][0].decode("utf-8") or ""
        lmail = "mail" in userdata and userdata["mail"][0].decode("utf-8") or ""

        if luser_id in users:
            del users[luser_id]
        else:
            logging.info("creating new user account for ldap user %s", luser_id)

            try:
                spacewalk.user.create(spacewalk_token, luser_id, "",
                                      lgiven_name, lsecond_name, lmail, 1)
            except Exception as e:
                logging.error("unable to create new user account %s on spacewalk server: %s", (luser_id, e))
    except Exception as e:
        logging.error("unable to fetch user details for user %s from LDAP server: %s" % (uid, e))


for user in list(users.keys()):
    logging.info("deleting user %s", user)
    try:
        spacewalk.user.delete(spacewalk_token, user)
    except Exception as e:
        logging.error("unable to remove user account %s from spacewalk: %s"
                % (user, e))

directory.unbind()
spacewalk.auth.logout(spacewalk_token)
