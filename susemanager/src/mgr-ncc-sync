#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2009, 2010 Novell, Inc.
#   This library is free software; you can redistribute it and/or modify
# it only under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
#
#   This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#
#   You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

import sys
import optparse
import xml.etree.ElementTree as etree

from spacewalk.susemanager import mgr_ncc_sync_lib


def main():
    parser = optparse.OptionParser(
        version="%prog 0.1",
        description="Sync SUSE Manager repositories from NCC")

    parser.add_option("-l", "--list-channels", action="store_true", dest="list",
                      help="list all the channels which are available for you")
    parser.add_option("--list-products", action="store_true", dest="productlist",
                      help="list all the products which are available for you")
    parser.add_option("--list-products-xml", action="store_true", dest="productlistxml",
                      help="list all the products which are available for you [XML Format]")
    parser.add_option("--add-product", action="store_true", dest="addproduct",
                      help="Add all mandatory channels of a product [interactive]")
    parser.add_option("-c", "--channel", action="store",
                      help="add a new channel and trigger a reposync")
    # hide the -p, -f, -s options, they're deprecated bnc#760924
    parser.add_option("-p", "--products", action="store_true",
                      help=optparse.SUPPRESS_HELP)
    parser.add_option("-f", "--update_cf", action="store_true",
                      help=optparse.SUPPRESS_HELP)
    parser.add_option("-s", "--update_subscriptions", action="store_true",
                      help=optparse.SUPPRESS_HELP)

    parser.add_option("-r", "--refresh", action="store_true",
                      help="refresh product, channel and subscription "
                      "information without triggering any reposyncs")
    parser.add_option("-m", "--migrate_res", action="store_true",
                      help="migrate to RES subscriptions")
    parser.add_option('-u', "--update_up", action="store_true",
                      help="update upgrade paths by XML config")
    parser.add_option('-q', '--quiet', action='store_true', dest='quiet',
                      help="Print no output, still logs output")
    parser.add_option('-d', '--debug', dest='debug', default=-1,
                      help="debugging")
    # --test is some kind of unit test. Do not use it in production systems
    parser.add_option("-t", "--test", action="store_true",
                      help=optparse.SUPPRESS_HELP)
    parser.add_option('-D', '--dump', dest="dumppath", action="store",
                      help='Dump NCC xml data into the given directory')
    parser.add_option("--from-dir", action="store", dest='fromdir',
                      help="read data from directory instead of NCC")

    (options, args) = parser.parse_args()

    syncer = mgr_ncc_sync_lib.NCCSync(quiet=options.quiet,
                                      debug=options.debug,
                                      fromdir=options.fromdir)
    if options.list:
        syncer.list_channels()
    elif options.productlist:
        ret = syncer.list_products()
        product_list(ret)
    elif options.addproduct:
        plist = syncer.list_products()
        cache = product_list(plist)
        add_product(syncer, plist, cache)
    elif options.productlistxml:
        ret = syncer.list_products()
        root = etree.Element('product_list')
        for xp in ret.values():
            xp.to_xml(root)
        print etree.tostring(root)
    elif options.dumppath:
        syncer.dump_to(options.dumppath)
    elif options.channel:
        syncer.update_channels()
        syncer.add_channel(options.channel)
        # schedule reposync even if the channel is already in the database
        syncer.sync_channel(options.channel)
    elif options.products:
        suse_products = syncer.get_suse_products_from_ncc()
        syncer.update_suse_products_table(suse_products)
    elif options.update_cf:
        syncer.update_channel_family_table_by_config()
    elif options.update_up:
        syncer.update_upgrade_pathes_by_config()
    elif options.test:
        syncer.test_subscription_calculation()
    elif options.update_subscriptions:
        syncer.update_subscriptions()
    elif options.migrate_res:
        syncer.migrate_res()
    elif options.refresh:
        syncer.update_channels()
        syncer.update_channel_family_table_by_config()
        suse_products = syncer.get_suse_products_from_ncc()
        syncer.update_suse_products_table(suse_products)
        syncer.update_subscriptions()
        syncer.sync_suseproductchannel()
        syncer.update_upgrade_pathes_by_config()
    else:
        syncer.update_channels()
        syncer.update_channel_family_table_by_config()
        suse_products = syncer.get_suse_products_from_ncc()
        syncer.update_suse_products_table(suse_products)
        syncer.update_subscriptions()
        syncer.sync_suseproductchannel()
        syncer.update_upgrade_pathes_by_config()
        syncer.sync_installed_channels()

def add_product(syncer, plist, numcache):
    print ""
    num = raw_input("Enter the number of the product you want to add: ")
    if not numcache.has_key(num):
        return
    syncer.update_channels()
    for channel_label in plist[numcache[num]].mandatory_channels:
        status = plist[numcache[num]].mandatory_channels[channel_label]
        if status == ".":
            syncer.add_channel(channel_label)
            # schedule reposync even if the channel is already in the database
            syncer.sync_channel(channel_label)


def product_list(plist):
    counter = 0
    numcache = {}
    for pk in sorted(plist.iterkeys()):
        p = plist[pk]
        if not p.is_base():
            continue
        stat = p.status()
        if stat == ".":
            counter = counter + 1
            print "(%3d) [%s] %s [%s]" % (counter, stat, p.name, p.arch)
            numcache[str(counter)] = p.ident
            continue
        else:
            print "(---) [%s] %s [%s]" % (stat, p.name, p.arch)
        for ck in sorted(plist.iterkeys()):
            c = plist[ck]
            if c.parent_product != p.ident:
                continue
            cstat = c.status()
            if cstat == ".":
                counter = counter + 1
                print "(%3d)    [%s] %s [%s]" % (counter, cstat, c.name, c.arch)
                numcache[str(counter)] = c.ident
            else:
                print "(---)    [%s] %s [%s]" % (cstat, c.name, c.arch)
    return numcache

if __name__ == "__main__":
    try:
        main()
    except IOError, e:
        print "ERROR: %s" % e
