{
    textdomain "susemanager";

    import "Directory";
    import "FileUtils";
    import "GetInstArgs";
    import "Message";
    import "Package";
    import "Popup";
    import "Stage";
    import "Wizard";

    map args = GetInstArgs::argmap ();
    any ret	= `auto;

    string migration_file	= Directory::tmpdir + "/susemanager_migration";
    boolean migration		= FileUtils::Exists (migration_file);

    map display_info	= UI::GetDisplayInfo ();
    boolean text_mode	= display_info["TextMode"]:false;

    string invalid_pw_chars	= "\"'!+%`=@/";

    map<string,string> settings	= $[
        "DB_BACKEND"            : "postgresql",
	"MANAGER_DB_NAME"	: "",
	"MANAGER_DB_HOST"	: "localhost",
	"MANAGER_DB_PORT"	: "",
	"MANAGER_DB_PROTOCOL"	: "TCP",
	"MANAGER_USER"		: "susemanager",
	"MANAGER_PASS"		: "",
	"MANAGER_PASS2"		: "",
    ];

    map<string,string> local_db	= $[
	"MANAGER_DB_NAME"	: "susemanager",
	"MANAGER_DB_HOST"	: "localhost",
	"MANAGER_DB_PROTOCOL"	: "TCP",
    ];

    list<string> FilterPackageList(list<string> in, boolean doRemove) {
        list<string> ret = [];

        foreach( string pkg, in, {
            if ((Package::Installed(pkg) && doRemove) ||
                (!Package::Installed(pkg) && !doRemove))
            {
                ret = add(ret, pkg);
            }
        });
        return ret;
    }

    string env_file	= Directory::tmpdir + "/env_db";
    if (FileUtils::Exists (env_file))
    {
	SCR::Execute (.target.remove, env_file);
    }
    SCR::Execute (.target.bash, sformat ("/usr/bin/touch %1; /bin/chmod 0600 %1;", env_file));

    // read existing values, if present
    foreach (string key, string value, settings, {
	string val	= getenv (key);
	if (val != nil && val != "")
	{
	    y2internal ("value for %1 present: %2", key, val);
	    settings[key]	= val;
	}
    });

    if (migration)
    {
	settings["MANAGER_USER"]	= "spacewalk";
	settings["MANAGER_PASS"]	= "spacewalk";
	settings["MANAGER_PASS2"]	= "spacewalk";
    }

    term contents = `HBox (`HSpacing (3), `VBox (

	`RadioButtonGroup (`id(`rb), `Frame ("", `HBox (`HSpacing (0.2), `VBox (
	    `VSpacing (0.4),
	    `Left (`RadioButton(`id(`localdb), `opt (`notify),
		// radio button label
		_("Embedded Database"), settings["MANAGER_DB_HOST"]:"" == "localhost")),
	    text_mode ? `Empty () : `VSpacing (),
	    `Left (`RadioButton(`id(`remotedb), `opt (`notify),
		// radio button label
		_("Remote Database"), settings["MANAGER_DB_HOST"]:"" != "localhost")),
	    `HBox (`HSpacing (3), `VBox (
		`VSpacing (0.4),
                `Left (`RadioButtonGroup (`id("DB_BACKEND"), `HBox (`HSpacing (0.2),
                    `RadioButton(`id(`postgres), `opt (`notify),
                    // radio button label
                    _("postgres Database"), settings["DB_BACKEND"]:"" == "postgresql"),
                    `RadioButton(`id(`oracle), `opt (`notify),
                    // radio button label
                    _("oracle Database"), settings["DB_BACKEND"]:"" == "oracle")))),
		// text entry label
		`InputField (`id ("MANAGER_DB_NAME"), `opt (`hstretch), _("&Database SID"),
		    settings["MANAGER_DB_NAME"]:""),
		// text entry label
		`InputField (`id ("MANAGER_DB_HOST"), `opt (`hstretch), _("&Hostname"),
		    settings["MANAGER_DB_HOST"]:""),
		`HBox (
		    // text entry label
		    `InputField (`id ("MANAGER_DB_PORT"), `opt (`hstretch), _("&Port"),
			settings["MANAGER_DB_PORT"]:""),
		    // text entry label
		    `InputField (`id ("MANAGER_DB_PROTOCOL"), `opt (`hstretch), _("Pro&tocol"),
		    settings["MANAGER_DB_PROTOCOL"]:"")
		)
	    ))// hbox
	)))),
	`VSpacing (0.4),
	// text entry label
	`InputField (`id ("MANAGER_USER"), `opt (`hstretch), _("Database &User"),
	    settings["MANAGER_USER"]:""),
	// text entry label
	`Password (`id ("MANAGER_PASS"), `opt (`hstretch), _("Database &Password"),
	    settings["MANAGER_PASS"]:""),
	// text entry label
	`Password (`id ("MANAGER_PASS2"), `opt (`hstretch), _("R&epeat Password"),
	    settings["MANAGER_PASS"]:""),


	`VSpacing (0.4)
    ), `HSpacing (1));

    // help text
    string help_text	= _("<p>Decide if to use the embedded or a remote database for SUSE Manager. If you select Local Database, Port and Protocol are set automatically.</p>
<p>For Remote Database you need to fill <b>Database SID</b> (Oracle System ID), Hostname, Port and Protocol.</p>
<p>
If you use the local database, set a user name and a password for the SUSE Manager database user that should be created. For a remote database, enter a user name that already exists in the database configuration and enter the correct password for this user</p>");

    // dialog caption
    Wizard::SetContents (_("Database Settings"), contents, help_text, args["enable_back"]:true, args["enable_next"]:true);
    UI::ChangeWidget (`id ("MANAGER_DB_PORT"), `ValidChars, "1234567890");
    UI::SetFocus (`id (`localdb));

    foreach (string key, string value, local_db, {
	UI::ChangeWidget (`id (key), `Enabled, settings["MANAGER_DB_HOST"]:"" != "localhost");
    });
    UI::ChangeWidget (`id ("MANAGER_DB_PORT"), `Enabled, settings["MANAGER_DB_HOST"]:"" != "localhost");
    UI::ChangeWidget (`id ("DB_BACKEND"), `Enabled, settings["MANAGER_DB_HOST"]:"" != "localhost");

    while (true)
    {
	ret	= UI::UserInput ();
	if (ret == `remotedb || ret == `localdb)
	{
	    foreach (string key, string value, local_db, {
		UI::ChangeWidget (`id (key), `Enabled, ret == `remotedb);
	    });
            UI::ChangeWidget (`id ("DB_BACKEND"), `Enabled, ret == `remotedb);
            UI::ChangeWidget (`id ("MANAGER_DB_PORT"), `Enabled, ret == `remotedb);
	}
	if (ret == `back)
	{
	    break;
	}
	if (ret == `abort && Popup::ConfirmAbort(`incomplete))
	{
	    break;
	}
	if (ret == `next)
	{
	    string pw1	= (string) UI::QueryWidget (`id ("MANAGER_PASS"), `Value);
	    if (pw1 == "")
	    {
		Popup::Error (_("Password is missing."));
		UI::SetFocus (`id ("MANAGER_PASS"));
		continue;
	    }
	    if (pw1 != UI::QueryWidget (`id ("MANAGER_PASS2"), `Value))
	    {
		Popup::Error (_("Passwords do not match."));
		UI::SetFocus (`id ("MANAGER_PASS"));
		continue;
	    }
	    //DB Password needs to be 7 chars long at least. Invalid chars: " $ ' !
	    if (size (pw1) < 7)
	    {
		Popup::Error (sformat (_("The password should have at least %1 characters."), 7));
		UI::SetFocus (`id ("MANAGER_PASS"));
		continue;
	    }
	    if (pw1 != deletechars (pw1, invalid_pw_chars))
	    {
		Popup::Error (sformat (_("The password contains invalid characters.
The invalid characters are: %1"), invalid_pw_chars));
		UI::SetFocus (`id ("MANAGER_PASS"));
		continue;
	    }
 	    string cracklib_check_result = (string)SCR::Execute(.crack, pw1);
	    if (cracklib_check_result != "")
	    {
		Popup::Error (sformat (_("The password failed the cracklib check with:
'%1'"), cracklib_check_result));
		UI::SetFocus (`id ("MANAGER_PASS"));
		continue;
	    }
	    boolean localdb = UI::QueryWidget (`id (`rb), `CurrentButton) == `localdb;
	    foreach (string key, string value, settings, {
                string val = "";
                if (key == "DB_BACKEND")
                {
                    if (localdb)
                    {
                        if (FileUtils::Exists ("/etc/init.d/oracle"))
                        {
                            y2milestone("local db oracle detected");
                            val = "oracle";
                        }
                        else
                        {
                            y2milestone("local db postgres detected");
                            val = "postgresql";
                        }
                    }
                    else if ( UI::QueryWidget (`id (key), `CurrentButton) == `postgres )
                    {
                        y2milestone("remote db postgres detected");
                        val = "postgresql";
                    }
                    else
                    {
                        y2milestone("remote db oracle detected");
                        val = "oracle";
                    }

                    list<string> oraclepkgs   = [ "spacewalk-oracle", "spacewalk-java-oracle", "spacewalk-backend-sql-oracle" ];
                    list<string> postgrespkgs = [ "spacewalk-postgresql", "spacewalk-java-postgresql", "spacewalk-backend-sql-postgresql" ];
                    if (val == "oracle")
                    {
                        // install oracle packages
                        list<string> install_packages = FilterPackageList(oraclepkgs, false);
                        list<string> remove_packages  = FilterPackageList(postgrespkgs, true);
                        if (size (install_packages) > 0 || size (remove_packages) > 0)
                        {
                            if (!Package::DoInstallAndRemove(install_packages, remove_packages))
                            {
                                Popup::Error (Message::FailedToInstallPackages ());
                            }
                        }
                    }
                    else if(val == "postgresql")
                    {
                        // install postgresql packages
                        list<string> install_packages = FilterPackageList(postgrespkgs, false);
                        list<string> remove_packages  = FilterPackageList(oraclepkgs, true);
                        if (size (install_packages) > 0 || size (remove_packages) > 0)
                        {
                            if (!Package::DoInstallAndRemove(install_packages, remove_packages))
                            {
                                Popup::Error (Message::FailedToInstallPackages ());
                            }
                        }
                    }
                }
                else
                {
                    val	= (string) UI::QueryWidget (`id (key), `Value);
                }
		if (localdb)
		{
                    if (haskey (local_db, key))
                    {
                        val = local_db[key]:"";
                    }
                    else if (val == "postgresql")
                    {
                        setenv("MANAGER_DB_PORT", "5432", true);
                        SCR::Execute (.target.bash, sformat ("echo \"export %1='%2'\" >> %3", "MANAGER_DB_PORT", "5432", env_file));
                    }
                    else if (val == "oracle")
                    {
                        setenv("MANAGER_DB_PORT", "1521", true);
                        SCR::Execute (.target.bash, sformat ("echo \"export %1='%2'\" >> %3", "MANAGER_DB_PORT", "1521", env_file));
                    }
                    else if (key == "MANAGER_DB_PORT")
                    {
                        continue;
                    }
		}

		setenv (key, val, true);
		SCR::Execute (.target.bash, sformat ("echo \"export %1='%2'\" >> %3", key, val, env_file));
	    });
            if (localdb)
            {
                setenv ("LOCAL_DB", "1", true);
                SCR::Execute (.target.bash, sformat ("echo \"export %1='%2'\" >> %3", "LOCAL_DB", "1", env_file));
            }
            else
            {
                setenv ("LOCAL_DB", "0", true);
                SCR::Execute (.target.bash, sformat ("echo \"export %1='%2'\" >> %3", "LOCAL_DB", "0", env_file));
            }


	    break;
	}
    }

    return ret;
}
