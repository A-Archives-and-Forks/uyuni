{
    textdomain "susemanager";

    import "Directory";
    import "FileUtils";
    import "GetInstArgs";
    import "Popup";
    import "Stage";
    import "Wizard";

    map args = GetInstArgs::argmap ();
    any ret = `auto;

    map<string,string> settings	= $[
	"NCC_USER"	: "",
	"NCC_PASS"	: "",
	"NCC_EMAIL"	: ""
    ];

    map<string,string> labels	= $[
	// text entry label
	"NCC_USER"	: _("NCC Mirror Credentials Username"),
	// text entry label
	"NCC_PASS"	: _("NCC Mirror Credentials Password"),
	// text entry label
	"NCC_EMAIL"	: _("NCC E-mail Address")
    ];

    string env_file	= Directory::tmpdir + "/env_ncc";
    if (FileUtils::Exists (env_file))
    {
	SCR::Execute (.target.remove, env_file);
    }

    // read existing values, if present
    foreach (string key, string value, settings, {
	string val	= getenv (key);
	if (val != nil && val != "")
	{
	    y2internal ("value for %1 present: %2", key, val);
	    settings[key]	= val;
	}
    });

    term contents = `HBox (`HSpacing (1), `VBox (
	// text entry label
	`InputField (`id ("NCC_USER"), `opt (`hstretch), _("NCC Mirror Credentials &Username"),
	    settings["NCC_USER"]:""),
	// text entry label
	`Password (`id ("NCC_PASS"), `opt (`hstretch), _("NCC Mirror Credentials &Password"),
	    settings["NCC_PASS"]:""),
	// text entry label
	`InputField (`id ("NCC_EMAIL"), `opt (`hstretch), _("NCC &E-mail Address"),
	    settings["NCC_EMAIL"]:""),
	`VSpacing (0.5)
    ), `HSpacing (1));


    // help text
    string help_text	= _("<p>Here, enter mirror credentials from the Novell Customer Center.</p>");

    // dialog caption
    Wizard::SetContents (_("NCC Settings"), contents, help_text, args["enable_back"]:true, args["enable_next"]:true);
    UI::SetFocus (`id ("NCC_USER"));

    while (true)
    {
	ret	= UI::UserInput ();
	if (ret == `back)
	{
	    break;
	}
	if (ret == `abort && Popup::ConfirmAbort(`incomplete))
	{
	    break;
	}
	if (ret == `next)
	{
	    boolean missing	= false;
	    foreach (string key, string value, settings, {
		string val	= (string) UI::QueryWidget (`id (key), `Value);
		if (val == "")
		{
		    string label	= labels[key]:key;
		    // error label
		    Popup::Error (sformat (_("The value of '%1' is empty."), label));
		    UI::SetFocus (`id (key));
		    missing	= true;
		    break;
		}
	    });
	    if (missing)
		continue;

	    string email	= (string) UI::QueryWidget (`id ("NCC_EMAIL"), `Value);
	    if (!issubstring (email, "@"))
	    {
		// error popup
		Popup::Error (_("The E-mail Address is not valid."));
		UI::SetFocus (`id ("NCC_EMAIL"));
		continue;
	    }
	    foreach (string key, string value, settings, {
		string val	= (string) UI::QueryWidget (`id (key), `Value);
		setenv (key, val, true);
		SCR::Execute (.target.bash, sformat ("echo 'export %1=\"%2\"' >> %3", key, val, env_file));
	    });

	    break;
	}
    }

    return ret;
}
