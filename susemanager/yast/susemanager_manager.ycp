{
    textdomain "susemanager";

    import "Directory";
    import "FileUtils";
    import "GetInstArgs";
    import "IP";
    import "Popup";
    import "Stage";
    import "Wizard";

    map args = GetInstArgs::argmap ();

    map<string,string> settings	= $[
	"MANAGER_IP"		: "",
	"MANAGER_USER"		: "susemanager",
	"MANAGER_PASS"		: "",
	"MANAGER_PASS2"		: "",
	"MANAGER_ADMIN_EMAIL"	: "",
	"MANAGER_ENABLE_TFTP"	: "y",
    ];

    string env_file	= Directory::tmpdir + "/env_manager";
    if (FileUtils::Exists (env_file))
    {
	SCR::Execute (.target.remove, env_file);
    }

    // read existing values, if present
    foreach (string key, string value, settings, {
	string val	= getenv (key);
	if (val != nil && val != "")
	{
	    y2internal ("value for %1 present: %2", key, val);
	    settings[key]	= val;
	}
    });

    term contents = `HBox (`HSpacing (1), `VBox (
	`InputField (`id ("MANAGER_IP"), `opt (`hstretch),
	    // text entry label
	    _("&IP Address of the SUSE Manager Server"), settings["MANAGER_IP"]:""),
	// text entry label
	`InputField (`id ("MANAGER_USER"), `opt (`hstretch), _("SUSE Manager DB &User"),
	    settings["MANAGER_USER"]:""),
	// text entry label
	`Password (`id ("MANAGER_PASS"), `opt (`hstretch), _("SUSE Manager DB &Password"),
	    settings["MANAGER_PASS"]:""),
	// text entry label
	`Password (`id ("MANAGER_PASS2"), `opt (`hstretch), _("Repeat Password"),
	    settings["MANAGER_PASS"]:""),
	`InputField (`id ("MANAGER_ADMIN_EMAIL"), `opt (`hstretch),
	    // text entry label
	    _("&Administrator e-mail Adress"), settings["MANAGER_ADMIN_EMAIL"]:""),
	// check box label
	`CheckBox (`id ("MANAGER_ENABLE_TFTP"), `opt (`hstretch), _("Enable &TFTP"),
	     settings["MANAGER_ENABLE_TFTP"]:"n" == "y"),
	`VSpacing (0.5)
    ), `HSpacing (1));


    string help_text	= "";

    // dialog caption
    Wizard::SetContents (_("SUSE Manager"), contents, help_text, args["enable_back"]:true, args["enable_next"]:true);

    any ret	= `back;
    while (true)
    {
	ret	= UI::UserInput ();
	if (ret == `back)
	{
	    break;
	}
	if (ret == `abort && Popup::ConfirmAbort(`incomplete))
	{
	    break;
	}
	if (ret == `next)
	{
	    string pw1	= (string) UI::QueryWidget (`id ("MANAGER_PASS"), `Value);
	    if (pw1 == "")
	    {
		Popup::Error (_("Password is missing."));
		continue;
	    }
	    if (pw1 != UI::QueryWidget (`id ("MANAGER_PASS2"), `Value))
	    {
		Popup::Error (_("Passwords do not match."));
		continue;
	    }
	    if (!IP::Check ((string) UI::QueryWidget (`id ("MANAGER_IP"), `Value)))
	    {
		Popup::Error (IP::Valid4 ());
		continue;
	    }

	    // TODO now, values are considered correct
	    foreach (string key, string value, settings, {
		string val	= value;
		if (key == "MANAGER_ENABLE_TFTP")
		{
		    val	= (boolean) UI::QueryWidget (`id (key), `Value) ? "y" : "n";
		}
		else
		{
		    val	= (string) UI::QueryWidget (`id (key), `Value);
		}
		setenv (key, val, true);
		// write env files
		SCR::Execute (.target.bash, sformat ("echo 'export %1=\"%2\"' >> %3", key, val, env_file));
	    });

	    break;
	}
    }

    return ret;
}
