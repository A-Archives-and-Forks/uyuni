{
    textdomain "susemanager";

    import "Directory";
    import "Hostname";
    import "FileUtils";
    import "GetInstArgs";
    import "IP";
    import "Popup";
    import "Stage";
    import "Wizard";

    map args = GetInstArgs::argmap ();
    any ret	= `auto;

    string migration_file	= Directory::tmpdir + "/susemanager_migration";
    boolean migration		= FileUtils::Exists (migration_file);
    if (!migration)
    {
	y2milestone ("setup from scratch was chosen, skipping this step");
	return ret;
    }

    string invalid_pw_chars	= "\"$'!";

    map<string,string> settings	= $[
	"SATELLITE_HOST"	: "satellite",
	"SATELLITE_DOMAIN"	: Hostname::CurrentDomain (),
	"SATELLITE_DB_USER"	: "rhnsat",
	"SATELLITE_DB_PASS"	: "rhnsat",
	"SATELLITE_DB_SID"	: "rhnsat"
    ];

    string env_file	= Directory::tmpdir + "/env_migration";
    if (FileUtils::Exists (env_file))
    {
	SCR::Execute (.target.remove, env_file);
    }

    // read existing values, if present
    foreach (string key, string value, settings, {
	string val	= getenv (key);
	if (val != nil && val != "")
	{
	    y2internal ("value for %1 present: %2", key, val);
	    settings[key]	= val;
	}
    });


    term contents = `HBox (`HSpacing (1), `VBox (
	`InputField (`id ("SATELLITE_HOST"), `opt (`hstretch),
	    // text entry label
	    _("&Hostname of the Satellite Server"), settings["SATELLITE_HOST"]:""),
	// text entry label
	`InputField (`id ("SATELLITE_DOMAIN"), `opt (`hstretch), _("&Domain name"),
	    settings["SATELLITE_DOMAIN"]:""),
	// text entry label
	`InputField (`id ("SATELLITE_DB_USER"), `opt (`hstretch), _("Satellite Database &User Name"),
	    settings["SATELLITE_DB_USER"]:""),
	// text entry label
	`InputField (`id ("SATELLITE_DB_PASS"), `opt (`hstretch), _("Satellite Database &Password"),
	    settings["SATELLITE_DB_PASS"]:""),
	// text entry label
	`InputField (`id ("SATELLITE_DB_SID"), `opt (`hstretch), _("Satellite Database &SID"),
	    settings["SATELLITE_DB_SID"]:""),
	`VSpacing (0.5)
    ), `HSpacing (1));


    string help_text	= "";

    // dialog caption
    Wizard::SetContents (_("Migration from Red Hat Satellite to SUSE Manager"),
	contents, help_text, args["enable_back"]:true, args["enable_next"]:true);

    while (true)
    {
	ret	= UI::UserInput ();
	if (ret == `back)
	{
	    break;
	}
	if (ret == `abort && Popup::ConfirmAbort(`incomplete))
	{
	    break;
	}
	if (ret == `next)
	{
	    string pw1	= (string) UI::QueryWidget (`id ("SATELLITE_DB_PASS"), `Value);
	    if (pw1 == "")
	    {
		Popup::Error (_("Password is missing."));
		continue;
	    }
	    if (pw1 != deletechars (pw1, invalid_pw_chars))
	    {
		Popup::Error (sformat (_("The password contains invalid characters.
The invalid characters are: %1"), invalid_pw_chars));
		continue;
	    }

	    // now, values are considered correct
	    foreach (string key, string value, settings, {
		string val = (string) UI::QueryWidget (`id (key), `Value);
		setenv (key, val, true);
		// write env files
		SCR::Execute (.target.bash, sformat ("echo 'export %1=\"%2\"' >> %3", key, val, env_file));
	    });

	    break;
	}
    }

    return ret;
}
