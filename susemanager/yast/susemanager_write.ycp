{
    textdomain "susemanager";

    import "Directory";
    import "FileUtils";
    import "Popup";
    import "Stage";
    import "Wizard";

    string dir		= Directory::tmpdir;
    string env_file	= "/root/setup_env.sh";

    if (FileUtils::Exists (env_file))
    {
	SCR::Execute (.target.remove, env_file);
    }

    string migration_file	= Directory::tmpdir + "/susemanager_migration";
    boolean migration		= FileUtils::Exists (migration_file);

    foreach (string file, [ "env_migration", "env_manager", "env_db", "env_cert", "env_ncc"], {
	string file_path	= sformat ("%1/%2", dir, file);
	if (FileUtils::Exists (file_path))
	{
	    SCR::Execute (.target.bash, sformat ("cat %1 >> %2", file_path, env_file));
	}
    });

    string logfile	= "/var/log/susemanager_setup.log";

    term label	= `ReplacePoint (`id (`rp_label),
	// text label
	`Label (`id (`label), _("Migration is prepared."))
    );
    if (migration)
    {
	label	= `VBox (
	    `VSpacing (2),
	    // text label
	    `Label ("The configuration files for a migration have been created.
Now you can start the migration process by calling

'/usr/lib/susemanager/bin/migration.sh -m'.

Be aware that this process can take more than 10 hours,
depending on the configuration of you Satellite server.

For more information of how to migrate a Satellite server,
read the Quickstart Reference."),
	    `VSpacing (2)
	);
    }

    term contents = `HBox (`HSpacing (1), `VBox (
	label,
	`VSpacing (0.5)
    ), `HSpacing (1));



    string help_text	= "";

    // dialog caption
    Wizard::SetContents (_("Write Settings"), contents, help_text, true, true);

    while (migration)
    {
	any ret	= UI::UserInput ();
	if (ret == `abort && !Popup::ConfirmAbort (`incomplete))
	{
	    continue;
	}
	else
	{
	    return ret;
	}
    }

    if (!Popup::YesNo (_("All data are collected. Run setup now?")))
    {
	return `back;
    }

    // text label
    UI::ReplaceWidget (`id (`rp_label), `Label (`id (`label), _("Setup is running. Please wait...")));

    UI::BusyCursor ();

    map out	= (map) SCR::Execute (.target.bash_output,
	sformat ("/usr/lib/susemanager/bin/migration.sh %1 -l %2", (migration ? "-m" : "-s"), logfile));

    if (out["stderr"]:"" != "")
    {
	y2warning ("call of migration.sh returned %1", out);
    }
    UI::NormalCursor ();

    return `next;
}
