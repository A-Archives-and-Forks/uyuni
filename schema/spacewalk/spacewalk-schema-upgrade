#!/usr/bin/perl

usestrict;
usewarningsFATAL=>'all';

useSpacewalk::Setup();
useIPC::Open3();
useFile::Basename;

my$SCHEMA_UPGRADE_DIR='/etc/sysconfig/rhn/schema-upgrade';
my$SCHEMA_UPGRADE_LOGDIR='/var/log/spacewalk/schema-upgrade';

my$config_file=Spacewalk::Setup::DEFAULT_RHN_CONF_LOCATION;

if(not-e$config_file){
die"Theconfigfile[$config_file]doesnotseemtoexist.WasSpacewalkconfiguredyet?\n";
}

my%options;
Spacewalk::Setup::read_config($config_file,\%options);
if(notdefined$options{db_backend}){
die"Configfile[$config_file]doesnotseemtohavedatabasebackendinfo(db_backend)set.\n";
}

$ENV{NLS_LANG}='AMERICAN_AMERICA.UTF8';
$ENV{NLS_NUMERIC_CHARACTERS}='.';

my$test=run_query("select'1'||'2'||'3'astestingfromdual;");
if(notdefined$test){
die"Connecttodatabasewasnotsuccessful.\n";
}
if($testne'123'){
die"Testselectfromdatabasedidnotgiveexpectedresults.\n";
}

my$default_tablespace;
if($options{db_backend}eq'oracle'){
$default_tablespace=run_query(<<EOF);
selectdefault_tablespace
fromuser_users
whereusername=sys_context('userenv','session_user');
EOF
if(notdefined$default_tablespace){
die"Failedtoretrievedefault_tablespacefromdatabase.\n";
}
}

my$my_schema_version_out=`rpm-qf--qf'%{name}%{version}%{release}\n'/etc/sysconfig/rhn/oracle/schema-override2>/dev/null`;
if($?){#thedirectorydoesnotexistsorisnotownedbyanyrpm
$my_schema_version_out=`rpm-qf--qf'%{name}%{version}%{release}\n'/etc/sysconfig/rhn/oracle/main.sql`;
}
my($my_schema_name,$my_schema_version,$my_schema_release)=($my_schema_version_out=~/^(\S+)\s(\S+)\s(\S+)$/);
if(notdefined$my_schema_release){
die"Failedtoretrieveourschemapackagenameandversion.\n";
}

if($ENV{SUMA_TEST_SCHEMA_VERSION}){
$my_schema_version=$ENV{SUMA_TEST_SCHEMA_VERSION};
}

my$target_schema=join'-',$my_schema_name,$my_schema_version,$my_schema_release;
(my$target_schema_norm=$target_schema)=~s!^(.+-\d+(\.\d+)*)(\..*)*$!$1!;

my$schema_version=run_query(<<EOF);
selectrhnPackageName.name||'-'||(PE.evr).version||'-'||(PE.evr).release
fromrhnVersionInfo,rhnPackageName,rhnPackageEVRPE
whererhnVersionInfo.label='schema'
andrhnVersionInfo.name_id=rhnPackageName.id
andrhnVersionInfo.evr_id=PE.id;
EOF
if(notdefined$schema_version){
my$migrationdir=run_query(<<EOF);
selectlabel
fromrhnVersionInfo
wherelabellike'schema-from%'
orderbylabelDESC;
EOF
if(!defined$migrationdiror!-d"$SCHEMA_UPGRADE_LOGDIR/$migrationdir"){
die"NoexistingschemaversioninfofoundinrhnVersionInfo.\n";
}
my@logfiles=sort{$bcmp$a}map{glob}"/var/log/spacewalk/schema-upgrade/$migrationdir-to-*.log";
my$lname=((scalar(@logfiles)>=1)?basename($logfiles[0]):"$migrationdir.log");
print"Foundunfinishedschemamigration\n";
print"Trytocontinueschemamigration\n";
run_schema_upgrade("$SCHEMA_UPGRADE_LOGDIR/$migrationdir",$lname,$target_schema,$default_tablespace);

exit;
}

if(not$schema_version=~/^rhn-satellite-schema-|^spacewalk-schema-|^satellite-schema-|^susemanager-schema-/){
die"Unknownschemaname[$schema_version]found.\n";
}

my$start_schema=$schema_version;
(my$start_schema_norm=$start_schema)=~s!^(.+-\d+(\.\d+)*)(\..*)*$!$1!;

print"Schemaupgrade:[$start_schema]->[$target_schema]\n";

my$foundtarget=0;
my$retried=0;
RETRY:

if(!$foundtarget){
print"Searchingforupgradepathto:[$target_schema_norm]\n";
}

my%upgrade_path;
my@queue=($target_schema_norm);
while(@queue){
my$t=shift@queue;
my@lookup=glob"$SCHEMA_UPGRADE_DIR/*-to-$t";
for(@lookup){
$foundtarget=1;
s!^\Q$SCHEMA_UPGRADE_DIR/\E!!;
s!-to-\Q$t\E$!!;
##print"[$_]->[$t]\n";
if($_eq$start_schema_norm){
##print"->startfound.\n";
}
$upgrade_path{$_}{$t}=$upgrade_path{$t};
push@queue,$_;
}
}

if(!$foundtarget){
if(not$retried){
if($target_schema_norm=~s!^(.+-.+)-\d+(\.\d+)*$!$1!){
$retried++;
gotoRETRY;
}
}
if($retried){
my$trunc_version=0;
if($target_schema_norm=~s!^(.+-.+\..+)\.[^.-]+$!$1!){
$trunc_version=1;
}
if($trunc_version){
gotoRETRY;
}
}
die"Wasnotabletofindupgradepathindirectory[$SCHEMA_UPGRADE_DIR].\n";
}

$retried=0;
RETRYSOURCE:

if($start_schemaeq$target_schema){
warn"Yourdatabaseschemaalreadymatchestheschemapackageversion[$target_schema].\n";
exit;
}
if($start_schema_normeq$target_schema_norm){
print"Theschemaversionisthesame,exceptforthedisttag.\n";
$upgrade_path{$target_schema_norm}=undef;
}

print"Searchingforstartpath:[$start_schema_norm]\n";

if(notexists$upgrade_path{$start_schema_norm}){
if(not$retried){
if($start_schema_norm=~s!^(.+-.+)-\d+(\.\d+)*$!$1!){
$retried++;
gotoRETRYSOURCE;
}
}
if($retried){
my$trunc_version=0;
if(!$foundtarget&&$target_schema_norm=~s!^(.+-.+\..+)\.[^.-]+$!$1!){
$trunc_version=1;
}
if($trunc_version){
gotoRETRYSOURCE;
}
}
die"Wasnotabletofindupgradepathindirectory[$SCHEMA_UPGRADE_DIR].\n";
}


my@path=get_shortest_path($upgrade_path{$start_schema_norm},$target_schema_norm);
print"Thepath:",(join"->",map"[$_]",$start_schema_norm,@path),"\n";

mkdir"/var/log/spacewalk",0755;
mkdir$SCHEMA_UPGRADE_LOGDIR,0755;
if(not-e$SCHEMA_UPGRADE_LOGDIR){
die"Failedtocreatelogdirectory[$SCHEMA_UPGRADE_LOGDIR]:$!\n";
}
system("/sbin/restorecon$SCHEMA_UPGRADE_LOGDIR2>&1>/dev/null");

my($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
my$stamp=sprintf"%04d%02d%02d-%02d%02d%02d",$year+1900,$mon+1,$mday,
$hour,$min,$sec;

my$start=$start_schema_norm;
my$migrationdir="schema-from-$stamp";
my$in=<<EOF;
updaterhnVersionInfo
setlabel='$migrationdir',
modified=current_timestamp
wherelabel='schema';
commit;
EOF
mkdir"$SCHEMA_UPGRADE_LOGDIR/$migrationdir",0755;
if(not-e"$SCHEMA_UPGRADE_LOGDIR/$migrationdir"){
die"Failedtocreatelogdirectory[$SCHEMA_UPGRADE_LOGDIR/$migrationdir]:$!\n";
}
open(INIT,">$SCHEMA_UPGRADE_LOGDIR/$migrationdir/00_0000-upgrade-start.sql")or
rmdir_and_die("Cannotcreateupgrade-startfile:$!","$SCHEMA_UPGRADE_LOGDIR/$migrationdir");
printINIT$in."\n";
closeINIT;

my$prenum=0;
while(@path){
my$t=shift@path;
my$dir="$start-to-$t";
if(not-e"$SCHEMA_UPGRADE_DIR/$dir"){
rmdir_and_die("Directory[$SCHEMA_UPGRADE_DIR/$dir]wasseenbutislostnow.\n",
"$SCHEMA_UPGRADE_LOGDIR/$migrationdir");
}
if($prenum>98)
{
#preventoverrun
rmdir_and_die("Overrun:toomanymigrations","$SCHEMA_UPGRADE_LOGDIR/$migrationdir");
}

my@files=match_overrides("$SCHEMA_UPGRADE_DIR/$dir/*.ref","$SCHEMA_UPGRADE_DIR/$dir/*.{sql,ref}.$options{db_backend}");
for(my$i=0;$i<@files;$i++){
if($files[$i]=~/\.ref(\.$options{db_backend})?$/){
my@subfiles;
local*REF;
openREF,$files[$i]orrmdir_and_die("Errorreading[$files[$i]]:$!\n","$SCHEMA_UPGRADE_LOGDIR/$migrationdir");
while(<REF>){
chomp;
nextif/^\s*(#|$)/;
my@newsubfiles=match_overrides("$SCHEMA_UPGRADE_DIR/$_","$SCHEMA_UPGRADE_DIR/$_.$options{db_backend}");
if(not@newsubfiles){
rmdir_and_die("Couldnotfindanyfilesmatching[$_]from[$files[$i]]\n","$SCHEMA_UPGRADE_LOGDIR/$migrationdir");
}
push@subfiles,@newsubfiles;
}
closeREF;
splice@files,$i,1,@subfiles;
$i--;
}
}

formy$fullname(@files){
(my$name=$fullname)=~s!^.*/!!;
my$linkname=sprintf("%02d_%s",$prenum,$name);
if(!symlink("$fullname","$SCHEMA_UPGRADE_LOGDIR/$migrationdir/$linkname"))
{
rmdir_and_die("Cannotcreatesymlink:$!","$SCHEMA_UPGRADE_LOGDIR/$migrationdir");
}
}
#print$in;
$start=$t;
$prenum++;
}

my$backend_dir=($options{db_backend}eq'postgresql'?'postgres':$options{db_backend});
my$endfile="/etc/sysconfig/rhn/$backend_dir/upgrade-end.sql";
$in="";
local*END;
openEND,'<',$endfileorrmdir_and_die("Errorreading[$endfile]:$!\n","$SCHEMA_UPGRADE_LOGDIR/$migrationdir");
{
local$/=undef;
$in.=join'',<END>;
}
closeEND;

$in.=<<EOF;
insertintorhnVersionInfo
(label,name_id,evr_id,created,modified)
values('schema',lookup_package_name('$my_schema_name'),
lookup_evr(null,'$my_schema_version','$my_schema_release'),
current_timestamp,current_timestamp);
commit;
EOF

local*SQL;
openSQL,">$SCHEMA_UPGRADE_LOGDIR/$migrationdir/99_9999-upgrade-end.sql"orrmdir_and_die(
"Errorwriting[$SCHEMA_UPGRADE_LOGDIR/$migrationdir/99_9999-upgrade-end.sql]:$!.\n",
"$SCHEMA_UPGRADE_LOGDIR/$migrationdir");
printSQL$in;
closeSQL;

my$lname="$migrationdir-to-$start.log";
run_schema_upgrade("$SCHEMA_UPGRADE_LOGDIR/$migrationdir",$lname,
$target_schema,$default_tablespace);

exit;

subrun_schema_upgrade
{
my$dir=shift;
my$logfilename=shift;
my$target_schema=shift;
my$default_tablespace=shift;

die"Migrationdirectory[$dir]doesnotexist."if(!-d"$dir");

print"Planningtorunschemaupgradewithdir'$dir'\n";
if(not@ARGVor$ARGV[0]ne'-y'){
local$|=1;
READ_ENTER:
print"HitEntertocontinueorCtrl+Ctointerrupt:";
my$in=<STDIN>;
chomp$in;
if($inne''){
gotoREAD_ENTER;
}
}

my$logfile=$SCHEMA_UPGRADE_LOGDIR."/$logfilename";

my$log;
open$log,'>>',$logfileordie"Errorwritinglogfile[$logfile]:$!\n";

system("/sbin/restorecon$logfile2>&1>/dev/null");

my($s,$m,$h,$md,$mo,$y,$wd,$yd,$isds)=localtime(time);
my$now=sprintf"%04d-%02d-%02d%02d:%02d:%02d",$y+1900,$mo+1,$md,
$h,$m,$s;

print$log"==================started:$now==================\n";
print"Executingspacewalk-sql,thelogisin[$logfile].\n";

my@migrationfiles=sortmap{glob}"$dir/*";
my$filecount=scalar(@migrationfiles);
my$counter=0;
$|=1;
foreachmy$migfile(@migrationfiles){
$counter++;
my$link=readlink($migfile);
$link=$migfileif(!$link);
my$fn=basename($link);
my$td=basename(dirname($link));

printSTDOUT"($counter/$filecount)applyupgrade[$td/$fn]","\r";
my$ret=run_query_direkt("$td/$fn",$migfile,$log,$default_tablespace);
if($ret!=0)
{
print"\n";
die"Upgradefailed,pleaseseelog[$logfile].\nYoucanfixthefailedmigrationin[$dir]\nandrunspacewalk-schema-upgradeagain\n";
}
unlink($migfile);
}
print"\n";

my$new_schema_version=run_query(<<EOF);
selectrhnPackageName.name||'-'||(PE.evr).version||'-'||(PE.evr).release
fromrhnVersionInfo,rhnPackageName,rhnPackageEVRPE
whererhnVersionInfo.label='schema'
andrhnVersionInfo.name_id=rhnPackageName.id
andrhnVersionInfo.evr_id=PE.id;
EOF
if(notdefined$new_schema_version){
die"UpgradeseemstohaverunOKyetnewschemaversionisnotinrhnVersionInfo.\n";
}
if($new_schema_versionne$target_schema){
die<<EOF;
UpgradeseemstohaverunOKyetnewschemaversionis
[$new_schema_version],not[$target_schema].
Pleaserunschemaupgradeagain.
EOF
}
rmdir"$dir";
print"Thedatabaseschemawasupgradedtoversion[$target_schema].\n";
}

subrun_query{
my($command)=@_;
$ENV{'LANG'}='C';
my$pid=IPC::Open3::open3(my$wfh,my$rfh,'>&STDERR',
'spacewalk-sql','--select-mode','-')orreturn;
print$wfh$command;
print$wfh"\n";
close$wfh;

my$out;
my$seen_dashes=0;
while(<$rfh>){
if(notdefined$outand$seen_dashes){
$out=$_;
last;
}
if(/---/){
$seen_dashes=1;
}
}
close$rfh;
waitpid$pid,0;
if($?){
return;
}

$out=~s/^\s+|\s+$//gifdefined$out;
#psqlprint'----'evenifnorowswereselected
$out=undefifdefined$out&&$out=~/^\(0rows\)$/;
return$out;
}

subrun_query_direkt{
my($msg,$file,$log,$default_tablespace)=@_;

my$sql=<<EOF;
select'$msg'fromdual;
EOF
open(F,"<$file")ordie"Cannotopenfile'$file':$!";
my$f_in;
{
local$/=undef;
$f_in=<F>;
}
closeF;
$f_in=~s!^--.*\n!!gm;
$f_in=~s!\[\[.*?\]\]|__.*?__!$default_tablespace!gifdefined$default_tablespace;
$sql.=$f_in;
$sql.=<<EOF;
commit;
EOF
print$log"SQL>";
print$log"$sql\n";

my$rfh;
my$pid=IPC::Open3::open3(my$wfh,$rfh,$rfh,
'spacewalk-sql','--select-mode-direct','-')ordie"Cannotexecutespacewalk-sql:$!";
print$wfh$sql;
print$wfh"\n";
close$wfh;

while(<$rfh>){
#print"$out";
print$log$_;
}
close$rfh;
waitpid$pid,0;
return($?>>8);
}

subget_shortest_path{
my($hash,$target)=@_;
my@out;
formy$k(keys%$hash){
if($keq$target){
return$k;
}
my@k_out=($k,get_shortest_path($hash->{$k},$target));
if(not@out||(@k_outand@k_out<@out)){
@out=@k_out;
}
}
@out;
}

submatch_overrides{
returnsortmap{-e"$_.override"?"$_.override":$_}grep{-e$_}map{glob}@_;
}

subrmdir_and_die{
my$msg=shift||"Error";
my$dir=shift||undef;

if($dir&&-d$dir){
opendir(DIR,$dir)anddo{
while(my$file=readdir(DIR)){
nextif($fileeq"."or$fileeq"..");
unlink($file);
}
closedirDIR;
};
unlink($dir);
}
die"$msg";
}

1;

=head1NAME

spacewalk-schema-upgrade-utilityforSpacewalk/Satelliteschemaupgrade

=head1SYNOPSIS

B<spacewalk-schema-upgrade>
[B<-y>]

=head1OPTIONS

=over5

=itemB<-y>

Proceedwithoutaskingforconfirmation.

=back

=head1DESCRIPTION

B<spacewalk-schema-upgrade>isutilityforSpacewalkandSatellitedatabase
schemaupgrade.

Let'sassumeyou'reupgradingyourSatelliteorSpacewalkinstallation
fromanearlierversionandyouaredonewiththepackageupgradepart
plusanyotherstepsthatwererequiredforyourinstallationtobeready
forschemaupgrade.WhatB<spacewalk-schema-upgrade>willdoforyouatthis
pointis:

=over5

=item

Readthedatabaseconnectionstringfromexistingconfigfile.

=item

Readtheversionofyourcurrent(i.e.old)schemafromdatabase.

=item

Findtheschemaversionyouareabouttoupgradeto(usinganrpmquery
command).

=item

Findshortestupgradepathbetweensaidschemaversions.

=item

Asktheuserforconfirmationtoproceedwiththeupgrade(canbeoverriden
withB<-y>switch).

=item

Proceedwiththeschemaupgradefollowingtheupgradepathfound,putting
theoutputfromexecutedsqlscripts(includingerrorsifany)
intoF</var/log/spacewalk/schema-upgrade>.Forthisstepitisimportant
thatyouhavespacewalk-sqlcommandinyourPATH.

=back

=head1FILES

=over5

=itemF</etc/sysconfig/rhn/schema-upgrade>

Directorycontainingdirectorieswithschemaupgradescripts(onedirectoryfor
everymajorupgradestep).

=itemF</etc/rhn/rhn.conf>

Defaultconfigurationfilecontainingdatabaseconnectioninformation.

=itemF</var/log/spacewalk/schema-upgrade>

Directorycontainingoutputfromsqlupgradescripts.

=back

=head1AUTHORS

JanPazdziora

=cut
