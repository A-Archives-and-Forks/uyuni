diff -rupN cobbler-2.0.11-orig/cobbler/action_buildiso.py cobbler-2.0.11/cobbler/action_buildiso.py
--- cobbler-2.0.11-orig/cobbler/action_buildiso.py	2011-04-20 08:40:48.000000000 -0400
+++ cobbler-2.0.11/cobbler/action_buildiso.py	2013-04-11 16:28:11.824111313 -0400
@@ -86,7 +86,7 @@ class BuildIso:
             return str(self.distctr)
 
   
-    def generate_netboot_iso(self,imagesdir,isolinuxdir,profiles=None,systems=None,exclude_dns=None):
+    def generate_netboot_iso(self,imagesdir,isolinuxdir,profiles=None,systems=None,exclude_dns=None,force_server=None):
         self.logger.info("copying kernels and initrds for profiles")
         # copy all images in included profiles to images dir
         for profile in self.api.profiles():
@@ -152,6 +152,8 @@ class BuildIso:
                 if dist.name.find("-xen") != -1:
                     continue
                 data = utils.blender(self.api, True, profile)
+                if force_server:
+                    data["server"] = force_server
                 distname = self.make_shorter(dist.name)
 
                 cfg.write("\n")
@@ -164,6 +166,12 @@ class BuildIso:
                         data["server"],
                         profile.name
                     )
+                else:
+                    if force_server:
+                        # replace configured hostname with the forced one
+                        data["kickstart"] = re.sub(r'://.*?/',
+                                '://' + data["server"] + '/',
+                                data["kickstart"])
 
                 append_line = "  append initrd=%s.img" % distname
                 append_line = append_line + " ks=%s " % data["kickstart"]
@@ -199,6 +207,8 @@ class BuildIso:
                    if dist.name.find("-xen") != -1:
                        continue
                    data = utils.blender(self.api, True, system)
+                   if force_server:
+                       data["server"] = force_server
                    distname = self.make_shorter(dist.name)
 
                    cfg.write("\n")
@@ -211,6 +221,12 @@ class BuildIso:
                            data["server"],
                            system.name
                        )
+                   else:
+                       if force_server:
+                           # replace configured hostname with the forced one
+                           data["kickstart"] = re.sub(r'://.*?/',
+                                   '://' + data["server"] + '/',
+                                   data["kickstart"])
 
                    append_line = "  append initrd=%s.img" % distname
                    append_line = append_line + " ks=%s" % data["kickstart"]
@@ -352,7 +368,7 @@ class BuildIso:
         return
 
 
-    def run(self,iso=None,buildisodir=None,profiles=None,systems=None,distro=None,standalone=None,source=None,exclude_dns=None):
+    def run(self,iso=None,buildisodir=None,profiles=None,systems=None,distro=None,standalone=None,source=None,exclude_dns=None,force_server=None):
 
         self.settings = self.config.settings()
 
@@ -417,14 +433,14 @@ class BuildIso:
         files = [ isolinuxbin, menu, chain ]
         for f in files:
             if not os.path.exists(f):
-               utils.die(self.logger,"Required file not found: %s" % f)
+               utils.die(self.logger,"Required file not found: %s. Try 'yum install cobbler-loaders'." % f)
             else:
                utils.copyfile(f, os.path.join(isolinuxdir, os.path.basename(f)), self.api)
 
         if standalone:
             self.generate_standalone_iso(imagesdir,isolinuxdir,distro,source)
         else:
-            self.generate_netboot_iso(imagesdir,isolinuxdir,profiles,systems,exclude_dns)
+            self.generate_netboot_iso(imagesdir,isolinuxdir,profiles,systems,exclude_dns,force_server)
 
         # removed --quiet
         cmd = "mkisofs -o %s -r -b isolinux/isolinux.bin -c isolinux/boot.cat" % iso
diff -rupN cobbler-2.0.11-orig/cobbler/action_check.py cobbler-2.0.11/cobbler/action_check.py
--- cobbler-2.0.11-orig/cobbler/action_check.py	2011-04-20 08:40:48.000000000 -0400
+++ cobbler-2.0.11/cobbler/action_check.py	2013-04-11 16:27:22.233765804 -0400
@@ -320,7 +320,7 @@ class BootCheck:
              not_found.append(loader_name)
 
        if len(not_found) > 0:
-          status.append("some network boot-loaders are missing from /var/lib/cobbler/loaders, you may run 'cobbler get-loaders' to download them, or, if you only want to handle x86/x86_64 netbooting, you may ensure that you have installed a *recent* version of the syslinux package installed and can ignore this message entirely.  Files in this directory, should you want to support all architectures, should include pxelinux.0, menu.c32, elilo.efi, and yaboot. The 'cobbler get-loaders' command is the easiest way to resolve these requirements.")
+           status.append("some network boot-loaders are missing from /var/lib/cobbler/loaders, you may run 'yum install cobbler-loaders' to download them, or, if you only want to handle x86/x86_64 netbooting, you may ensure that you have installed a *recent* version of the syslinux package installed and can ignore this message entirely.  Files in this directory, should you want to support all architectures, should include pxelinux.0, menu.c32, elilo.efi, and yaboot. The 'yum install cobbler-loaders' command is the easiest way to resolve these requirements.")
  
    def check_tftpd_bin(self,status):
        """
diff -rupN cobbler-2.0.11-orig/cobbler/action_dlcontent.py cobbler-2.0.11/cobbler/action_dlcontent.py
--- cobbler-2.0.11-orig/cobbler/action_dlcontent.py	2011-04-20 08:40:40.000000000 -0400
+++ cobbler-2.0.11/cobbler/action_dlcontent.py	2013-04-11 16:27:22.234765810 -0400
@@ -39,45 +39,11 @@ class ContentDownloader:
 
    def run(self,force=False):
        """
-       Download bootloader content for all of the latest bootloaders, since the user
-       has chosen to not supply their own.  You may ask "why not get this from yum", though
-       Fedora has no IA64 repo, for instance, and we also want this to be able to work on Debian and
-       further do not want folks to have to install a cross compiler.  For those that don't like this approach
-       they can still source their cross-arch bootloader content manually.
+       This action used to download the bootloaders from fedorapeople.org,
+       however these files are now available from yum in the cobbler-loaders
+       package so you should use that instead.
        """
 
-       content_server = "http://dgoodwin.fedorapeople.org/loaders"
-       dest = "/var/lib/cobbler/loaders"
-
-       files = (
-          ( "%s/README" % content_server, "%s/README" % dest ),
-          ( "%s/COPYING.elilo" % content_server, "%s/COPYING.elilo" % dest ),
-          ( "%s/COPYING.yaboot" % content_server, "%s/COPYING.yaboot" % dest),
-          ( "%s/COPYING.syslinux" % content_server, "%s/COPYING.syslinux" % dest),
-          ( "%s/elilo-3.8-ia64.efi" % content_server, "%s/elilo-ia64.efi" % dest ),
-          ( "%s/yaboot-1.3.14-12" % content_server, "%s/yaboot" % dest),
-          ( "%s/pxelinux.0-3.61" % content_server, "%s/pxelinux.0" % dest),
-          ( "%s/menu.c32-3.61" % content_server, "%s/menu.c32" % dest),
-          ( "%s/grub-0.97-x86.efi" % content_server, "%s/grub-x86.efi" % dest),
-          ( "%s/grub-0.97-x86_64.efi" % content_server, "%s/grub-x86_64.efi" % dest),
-       )
-
-       proxies = {}
-       if os.environ.has_key("HTTP_PROXY"):
-          proxies['http'] = os.environ[var]
-
-       if os.environ.has_key("FTP_PROXY"):
-          proxies['ftp'] = os.environ[var]
-
-       if len(proxies) == 0:
-          proxies = None
-
-       for src,dst in files:
-          if os.path.exists(dst) and not force:
-             self.logger.info("path %s already exists, not overwriting existing content, use --force if you wish to update" % dst)
-             continue
-          self.logger.info("downloading %s to %s" % (src,dst))
-          urlgrabber.grabber.urlgrab(src, filename=dst, proxies=proxies)
-
-       return True
+       self.logger.info("The 'cobbler get-loaders' command has been obsoleted with 'yum install cobbler-loaders' in this version of cobbler. Please use 'yum install cobbler-loaders' instead.")
+       return False
 
diff -rupN cobbler-2.0.11-orig/cobbler/api.py cobbler-2.0.11/cobbler/api.py
--- cobbler-2.0.11-orig/cobbler/api.py	2011-04-20 08:40:48.000000000 -0400
+++ cobbler-2.0.11/cobbler/api.py	2013-04-11 16:27:22.234765810 -0400
@@ -751,10 +751,10 @@ class BootAPI:
 
     # ==========================================================================
 
-    def build_iso(self,iso=None,profiles=None,systems=None,buildisodir=None,distro=None,standalone=None,source=None, exclude_dns=None, logger=None):
+    def build_iso(self,iso=None,profiles=None,systems=None,buildisodir=None,distro=None,standalone=None,source=None, exclude_dns=None, logger=None, force_server=None):
         builder = action_buildiso.BuildIso(self._config, logger=logger)
         return builder.run(
-           iso=iso, profiles=profiles, systems=systems, buildisodir=buildisodir, distro=distro, standalone=standalone, source=source, exclude_dns=exclude_dns
+           iso=iso, profiles=profiles, systems=systems, buildisodir=buildisodir, distro=distro, standalone=standalone, source=source, exclude_dns=exclude_dns, force_server=force_server
         )
 
     # ==========================================================================
diff -rupN cobbler-2.0.11-orig/cobbler/cli.py cobbler-2.0.11/cobbler/cli.py
--- cobbler-2.0.11-orig/cobbler/cli.py	2011-04-20 08:40:48.000000000 -0400
+++ cobbler-2.0.11/cobbler/cli.py	2013-04-11 16:27:22.235765818 -0400
@@ -321,6 +321,7 @@ class BootCLI:
             self.parser.add_option("--standalone", dest="standalone", action="store_true", help="(OPTIONAL) creates a standalone ISO with all required distro files on it")
             self.parser.add_option("--source",   dest="source",   help="(OPTIONAL) used with --standalone to specify a source for the distribution files")
             self.parser.add_option("--exclude-dns", dest="exclude_dns", action="store_true", help="(OPTIONAL) prevents addition of name server addresses to the kernel boot options")
+            self.parser.add_option("--force-server", dest="force_server", help="(OPTIONAL) get required files from the given server instead of the default (may be given as IP Address or FQDN of the server)")
 
             (options, args) = self.parser.parse_args()
             task_id = self.start_task("buildiso",options)
diff -rupN cobbler-2.0.11-orig/cobbler/remote.py cobbler-2.0.11/cobbler/remote.py
--- cobbler-2.0.11-orig/cobbler/remote.py	2011-04-20 08:40:48.000000000 -0400
+++ cobbler-2.0.11/cobbler/remote.py	2013-04-11 16:27:22.235765818 -0400
@@ -152,7 +152,8 @@ class CobblerXMLRPCInterface:
                 self.options.get("standalone",False),
                 self.options.get("source",None),
                 self.options.get("exclude_dns",False),
-                self.logger
+                self.logger,
+                self.options.get("force_server",None)
             )
         def on_done(self):
             if self.options.get("iso","") == "/var/www/cobbler/pub/generated.iso":
