<datasource_modes>

<mode name="time_series_for_probe">
  <query params="oid, start_time, end_time"><![CDATA[
SELECT  O_ID, ENTRY_TIME, DATA
    FROM time_series TS
    WHERE TS.o_id = :oid
    AND TS.entry_time >= :start_time
    AND TS.entry_time <= :end_time
    ORDER BY TS.entry_time
    ]]>
  </query>
</mode>

<mode name="state_change_for_probe" class="com.redhat.rhn.frontend.dto.monitoring.StateChangeData">
  <query params="oid, start_time, end_time"><![CDATA[
SELECT  O_ID, ENTRY_TIME, DATA
    FROM state_change SC
    WHERE SC.o_id = :oid
    AND SC.entry_time >= :start_time
    AND SC.entry_time <= :end_time
    ORDER BY SC.entry_time DESC
    ]]>
  </query>
</mode>

<mode name="probe_suites_in_org" class="com.redhat.rhn.frontend.dto.monitoring.ProbeSuiteDto">
  <query params="org_id, user_id"><![CDATA[
SELECT csouter.recid suite_id, csouter.suite_name suite_name, csouter.description description,
 (SELECT count(DISTINCT cp.host_id) system_count
    FROM RHN_CHECK_SUITE_PROBE csp,
         RHN_SERVICE_PROBE_ORIGINS spo, RHN_CHECK_PROBE cp
    WHERE csouter.recid = csp.check_suite_id AND
          csp.probe_id = spo.origin_probe_id AND
          spo.service_probe_id = cp.probe_id) system_count,
 (SELECT count(DISTINCT cp.host_id)
    FROM RHN_CHECK_SUITE_PROBE csp,
         RHN_SERVICE_PROBE_ORIGINS spo, RHN_CHECK_PROBE cp,
         rhnUserServerPerms usp
    WHERE csouter.recid = csp.check_suite_id AND
          csp.probe_id = spo.origin_probe_id AND
          spo.service_probe_id = cp.probe_id AND
          cp.host_id = usp.server_id AND
          usp.user_id = :user_id) access_count
FROM rhn_check_suites csouter
    WHERE csouter.customer_id = :org_id
    ]]>
  </query>
</mode>

<mode name="probe_suite_accessible">
  <query params="user_id, suite_id"><![CDATA[
SELECT count(*) noaccess
FROM RHN_CHECK_SUITE_PROBE csp,
     RHN_SERVICE_PROBE_ORIGINS spo, RHN_CHECK_PROBE cp
WHERE :suite_id = csp.check_suite_id
  AND csp.probe_id = spo.origin_probe_id
  AND spo.service_probe_id = cp.probe_id
  AND NOT EXISTS (SELECT 1 FROM rhnUserServerPerms usp
                          WHERE usp.server_id = cp.host_id
                            AND usp.user_id = :user_id)
    ]]>
  </query>
</mode>

<mode name="probes_in_probe_suite">
  <query params="suite_id, org_id"><![CDATA[
SELECT p.recid id, p.description description,
       c.description cmd_description
FROM rhn_check_suite_probe csp, rhn_probe p, rhn_command c
WHERE csp.check_suite_id = :suite_id
  AND p.recid = csp.probe_id
  AND p.customer_id = :org_id
  AND c.recid = p.command_id
ORDER BY p.description
    ]]>
  </query>
</mode>

<mode name="active_filters_in_org" class="com.redhat.rhn.frontend.dto.monitoring.FilterDto">
  <query params="org_id"><![CDATA[
SELECT recid, redirect_type, description, expiration
FROM rhn_redirects
WHERE customer_id = :org_id
AND expiration >= sysdate
]]>
  </query>
</mode>

<mode name="expired_filters_in_org" class="com.redhat.rhn.frontend.dto.monitoring.FilterDto">
  <query params="org_id"><![CDATA[
SELECT recid, redirect_type, description, expiration
FROM rhn_redirects
WHERE customer_id = :org_id
AND expiration <= sysdate
]]>
  </query>
</mode>


<mode name="probes_in_org" class="com.redhat.rhn.frontend.dto.monitoring.CheckProbeDto">
  <query params="org_id"><![CDATA[
SELECT p.recid id, p.description,
       cp.host_id server_id, s.name server_name
FROM rhn_probe p, rhn_check_probe cp, rhnServer s
WHERE p.customer_id = :org_id
  and cp.probe_id = p.recid
  and s.id = cp.host_id
ORDER BY p.description, s.name
]]>
  </query>
</mode>

<mode name="contact_groups_in_org">
  <query params="org_id">
    <![CDATA[
SELECT recid, contact_group_name as groupName
FROM rhn_contact_groups
WHERE customer_id = :org_id
    ]]>
  </query>
</mode>

<mode name="methods_in_org" class="com.redhat.rhn.frontend.dto.monitoring.MethodDto">
  <query params="org_id">
    <![CDATA[
SELECT WC.id user_id,
       WC.login login,
       CM.recid recid,
       CM.method_name method_name,
       DECODE( MT.method_type_name,
         'Email', CM.email_address,
         'Pager', CM.pager_email,
         'SNMP', CM.snmp_host) method_target,
       MT.method_type_name method_type
  FROM rhn_contact_methods CM,
       web_contact WC,
       rhn_method_types MT
 WHERE WC.org_id = :org_id
   AND CM.contact_id = WC.id
   AND CM.method_type_id = MT.recid (+)
ORDER BY WC.login, CM.method_name
    ]]>
  </query>
</mode>

<mode name="servers_in_suite" class="com.redhat.rhn.frontend.dto.monitoring.MonitoredServerDto">
  <query params="suite_id"><![CDATA[
SELECT distinct s.id, s.name,
( SELECT  DECODE(
                   MAX(DECODE(statps.state, 'OK', 1, 'PENDING', 2, 'UNKNOWN', 3, 'WARNING', 4, 'CRITICAL', 5)),
                         1, 'OK', 2, 'PENDING', 3, 'UNKNOWN', 4, 'WARNING', 5, 'CRITICAL') ST
           FROM  rhn_check_probe statcp, rhn_probe_state statps
          WHERE  statcp.probe_id = statps.probe_id
            AND  s.id = statcp.host_id(+)
         GROUP BY s.id ) status
FROM rhn_check_suites cs,
     rhn_check_suite_probe csp,
     rhn_service_probe_origins spo,
     rhn_check_probe cp,
     rhn_probe_state ps,
     rhnServer s
WHERE cs.recid = :suite_id
  and csp.check_suite_id = cs.recid
  and spo.origin_probe_id = csp.probe_id
  and cp.probe_id = spo.service_probe_id
  and ps.probe_id = cp.probe_id
  and s.id = cp.host_id
  ]]>
  </query>
</mode>

<!-- remove probe states: used by Proxy Deactivation -->
<write-mode name="delete_probe_states_from_server">
  <query params="server_id">
DELETE
  FROM rhn_probe_state PS
 WHERE PS.probe_id in
(SELECT CP.probe_id
   FROM rhn_check_probe CP
  WHERE CP.sat_cluster_id =
(SELECT SN.sat_cluster_id
   FROM rhn_sat_node SN
  WHERE SN.server_id = :server_id))
   </query>
</write-mode>

<!-- remove the deployed probes -->
<write-mode name="delete_deployed_probes_from_server">
  <query params="server_id">
DELETE
  FROM rhn_deployed_probe DP
 WHERE DP.recid in
(SELECT CP.probe_id
   FROM rhn_check_probe CP
  WHERE CP.sat_cluster_id =
(SELECT SN.sat_cluster_id
   FROM rhn_sat_node SN
  WHERE SN.server_id = :server_id))
   </query>
</write-mode>

<!-- delete the probe now -->
<write-mode name="delete_probes_from_server">
  <query params="server_id">
DELETE
  FROM rhn_probe P
 WHERE P.recid in
(SELECT CP.probe_id
   FROM rhn_check_probe CP
  WHERE CP.sat_cluster_id =
(SELECT SN.sat_cluster_id
   FROM rhn_sat_node SN
  WHERE SN.server_id = :server_id))
   </query>
</write-mode>

<!-- remove the sat cluster now -->
<write-mode name="delete_sat_cluster_for_server">
  <query params="server_id">
DELETE
  FROM rhn_sat_cluster SC
 WHERE SC.recid in
(SELECT SN.sat_cluster_id
   FROM rhn_sat_node SN
  WHERE SN.server_id = :server_id)
   </query>
</write-mode>

<mode name="probe_counts_by_state" class="com.redhat.rhn.frontend.dto.monitoring.ProbeCategoryDto">
  <query params="org_id, user_id, state">
SELECT C.description,
       count(p.recid) probe_count,
       count(S.id) server_count
  FROM rhn_probe P, rhn_command C, rhn_command_groups CG, rhnServer S,
       rhn_probe_state PS, rhnUserServerPerms USP
  where P.command_id = C.recid
    AND C.group_name = CG.group_name
    AND P.recid = PS.probe_id
    AND PS.state = :state
    AND P.customer_id = :org_id
    AND S.id = (SELECT host_id from rhn_check_probe where probe_id = P.recid)
   AND  USP.user_id = :user_id
   AND  USP.server_id = S.id
  GROUP BY CG.description, C.description
ORDER BY CG.description
  </query>
</mode>

<mode name="probes" class="com.redhat.rhn.frontend.dto.monitoring.ServerProbeDto">
  <query params="org_id, user_id">
SELECT  S.id server_id,
        S.name server_name,
        P.recid id,
        P.description,
        PS.state,
        PS.output output,
        PS.last_check
  FROM  rhnServer S, rhn_probe P, rhn_probe_state PS, rhnUserServerPerms USP
 WHERE  P.recid = PS.probe_id
   AND  S.id = (SELECT host_id from check_probe where probe_id = P.recid)
   AND  customer_id = :org_id
   AND  P.probe_type = 'check'
   AND  USP.user_id = :user_id
   AND  USP.server_id = S.id
ORDER BY server_name, description
  </query>
</mode>

<mode name="probes_by_state" class="com.redhat.rhn.frontend.dto.monitoring.ServerProbeDto">
  <query params="org_id, user_id, state">
SELECT  S.id server_id,
        S.name server_name,
        P.recid id,
        P.description,
        PS.state,
        PS.output output,
        PS.last_check
  FROM  rhnServer S, rhn_probe P, rhn_probe_state PS, rhnUserServerPerms USP
 WHERE  P.recid = PS.probe_id
   AND  S.id = (SELECT host_id from check_probe where probe_id = P.recid)
   AND  customer_id = :org_id
   AND  P.probe_type = 'check'
   AND  PS.state = :state
   AND  USP.user_id = :user_id
   AND  USP.server_id = S.id
ORDER BY server_name, description
  </query>
</mode>

<mode name="probes_in_server" class="com.redhat.rhn.frontend.dto.monitoring.ServerProbeDto">
  <query params="sid"><![CDATA[
SELECT p.recid id, p.description,
       cp.host_id server_id,
       ps.state, ps.output, csp.check_suite_id as probe_suite_id,
       spo.origin_probe_id as template_probe_id
FROM rhn_probe p
LEFT OUTER JOIN rhn_service_probe_origins spo ON spo.service_probe_id = p.recid
LEFT OUTER JOIN rhn_check_suite_probe csp ON csp.probe_id = spo.origin_probe_id,
rhn_check_probe cp, rhnServer s, rhn_probe_state ps
WHERE s.id = :sid
  and cp.probe_id = p.recid
  and s.id = cp.host_id
  and ps.probe_id = p.recid
ORDER BY p.description]]>
  </query>
</mode>

<mode name="probes_in_server_with_alerts" class="com.redhat.rhn.frontend.dto.monitoring.ServerProbeDto">
  <query params="sid"><![CDATA[
SELECT p.recid id, p.description,
       cp.host_id server_id,
       ps.state, ps.output, csp.check_suite_id as probe_suite_id,
       spo.origin_probe_id as template_probe_id
FROM rhn_probe p
LEFT OUTER JOIN rhn_service_probe_origins spo ON spo.service_probe_id = p.recid
LEFT OUTER JOIN rhn_check_suite_probe csp ON csp.probe_id = spo.origin_probe_id,
rhn_check_probe cp, rhnServer s, rhn_probe_state ps
WHERE s.id = :sid
  and cp.probe_id = p.recid
  and s.id = cp.host_id
  and ps.probe_id = p.recid
  and (ps.state = 'CRITICAL' OR ps.state = 'WARNING')
ORDER BY p.description]]>
  </query>
</mode>

<mode name="probe_state_count_by_user">
  <query params="user_id">
SELECT count(ps.state) AS state_count, PS.state
  FROM rhn_probe_state PS,
       rhn_check_probe CP,
       rhnUserServerPerms USP
  WHERE PS.probe_id = CP.probe_id AND
        CP.host_id = USP.server_id AND
        USP.user_id = :user_id
  GROUP BY PS.state
  </query>
</mode>

<callable-mode name="push_scout_config">
  <query params="org_id, scout_id, user_id">
{call rhn_install_org_satellites(:org_id, :scout_id, :user_id)}
  </query>
</callable-mode>

<write-mode name="delete_time_series_for_probe">
  <query params="probe_id">
  DELETE /*+index(time_series time_series_probe_id_idx)*/
  FROM time_series
  WHERE substr(o_id, instr(o_id, '-') + 1,
        (instr(o_id, '-', instr(o_id, '-') + 1) - instr(o_id, '-'))    - 1) = :probe_id
   </query>
</write-mode>

</datasource_modes>
