<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 SUSE Manager build file for development use
 
 Builds and deploys the webapp to a SSH host running Tomcat
 
 Requirements:
  - sudo zypper in java-1_7_0-openjdk-devel ssh rsync
  - sudo zypper rm *gcj-compat*
  - an account on the SSH host to deploy to. An authorized key on
  the host is strongly recommended, to set it up on DevEnv use:
  
  ssh-copy-id root@DEVENV_ADDRESS
 
 Configuration:
  - cp buildconf/developer-build.properties.example buildconf/developer-build.properties
  - you can override any other property in that file, eg.
      precompiled=true: assume that build/classes already contains
      the compiled sources (eg. precompiled by your IDE) and don't
      call javac.
      Note for Eclipse users: set up compilation with a 1.6VM
      and 1.6 compiler compliance!
-->
<project name="SUSE Manager" default="deploy" basedir=".">
  <!-- User-defined properties, maximum priority -->
  <property file="buildconf/developer-build.properties" />

  <!-- Project-level properties -->
  <import file="buildconf/build-props.xml" />

  <!-- Default values for other properties -->
  <property name="deploy.host" value="deployhost" />
  <property name="deploy.dir" value="/var/lib/tomcat6/webapps/rhn" />
  <property name="deploy.user" value="root" />  
  <property name="tests.include" value="**/test/*Test.class"/>
  <property name="tests.exclude" value="none"/>
  <property name="tests.results.dir" value="test-results"/>

  <!-- Paths -->
  <path id="libjars">
    <fileset dir="${lib.dir}" includes="**/*.jar" />
  </path>

  <!-- Targets -->
  <target name="init-tests">
    <property name="build.tests" value="true" />
  </target>

  <target name="clean" description="Cleans up all generated files">
    <delete dir="${build.dir}" quiet="true">
      <exclude name="classes/**/*" if="precompiled" />
    </delete>
    <delete dir="${test.results.dir}" />
  </target>

  <target name="compile"
          depends="clean"
          unless="precompiled"
          description="Compiles the main codebase"
  >
    <mkdir dir="${build.dir}/classes" />
    <javac destdir="${build.dir}/classes"
           optimize="off"
           debug="on"
           source="1.6"
           target="1.6"
           deprecation="${deprecation}"
           nowarn="${nowarn}"
           encoding="utf-8"
           fork="yes"
           memoryMaximumSize="256m"
           includeAntRuntime="false"
           classpathref="libjars"
    >
      <src>
        <path location="code/src" />
        <path location="code/scripts/src" />
      </src>
      <exclude name="**/test/*.java" unless="build.tests" />
    </javac>

    <copy toDir="${build.dir}/classes">
      <fileset dir="${src.dir}/src">
        <exclude name="**/*.java" />
        <exclude name="**/package.html" />
      </fileset>
    </copy>
  </target>

  <target name="jar" depends="compile" description="Packs the main application jar">
    <jar destfile="${build.dir}/rhn.jar">
      <fileset dir="${build.dir}/classes">
        <!-- internal is not for publication; tlds go in META-INF;  html files go as javadoc -->
        <exclude name="**/internal/**" />
        <exclude name="**/*.tld" />
        <exclude name="**/*.html" />
        <exclude name="**/test/" unless="build.tests" />
        <exclude name="**/*/testing/**" unless="build.tests" />
        <exclude name="**/log4j.properties" />
        <exclude name="**/*.conf" />
        <exclude name="**/*.conf.rpmsave" />
        <exclude name="**/StringResource*.xml" />
      </fileset>
      <fileset dir="${build.dir}/classes">
        <include name="**/StringResource_en_US.xml" />
      </fileset>
      <!-- Can't be flattened like in <copy>, alas -->
      <metainf dir="${build.dir}/classes/com/redhat/rhn/frontend/taglibs">
        <include name="*.tld" />
      </metainf>
    </jar>
  </target>

  <target name="webapp" depends="jar" description="Creates the Web application directory">
    <copy todir="${build.dir}/webapp">
      <fileset dir="${src.dir}/webapp">
        <exclude name="help/**" />
      </fileset>
    </copy>

    <copy todir="${build.dir}/webapp/WEB-INF/lib">
      <fileset file="${build.dir}/rhn.jar" />
      <fileset dir="${lib.dir}">
        <include name="**/*.jar" />

        <!-- Don't copy unneded jars -->
        <exclude name="**/jasper*" />
        <exclude name="**/jspapi*" />
        <exclude name="**/ojdbc*" />
        <exclude name="**/oracle-jdbc*" />
        <exclude name="**/servlet*" />
        <exclude name="**/tomcat6*" />
      </fileset>
      <fileset dir="${rhn-home}/buildconf/tempjars">
        <include name="**/*.jar" />
      </fileset>
    </copy>
  </target>

  <target name="deploy" depends="webapp" description="Deploys a new copy of SUSE Manager">
    <echo message="Copying files to remote host..." />
    <exec executable="rsync" description="Copies files to deploy host">
      <arg line="-a --delete ${build.dir}/webapp/ ${deploy.user}@${deploy.host}:${deploy.dir}/" />
    </exec>

    <exec command="ssh ${deploy.user}@${deploy.host}"
          inputstring='
        echo "Linking the branding jar...";
        ln -sf /usr/share/rhn/lib/java-branding.jar ${deploy.dir}/WEB-INF/lib/java-branding.jar;
  
        echo "Linking the main jar for Taskomatic...";
        mv ${deploy.dir}/WEB-INF/lib/rhn.jar /usr/share/rhn/lib;
        ln -sf /usr/share/rhn/lib/rhn.jar ${deploy.dir}/WEB-INF/lib;
      
        echo "Restarting Tomcat...";
        rctomcat6 restart;
      '
    />
  </target>

  <target name="run-tests" depends="init-tests,jar" description="Runs unit tests locally">
    <mkdir dir="${tests.results.dir}"/>
    
    <echo message="Running tests (including ${tests.include}, excluding ${tests.exclude}...)" />
    <junit fork="yes"
           forkmode="once"
           maxmemory="256m"
    >
      <sysproperty key="rhn-home" value="." />
      <sysproperty key="java.awt.headless" value="true" />
      <sysproperty key="log4j.threshold" value="warn" />
      <sysproperty key="rhn.config.dir" value="conf/default" />

      <jvmarg value="-ea" />
      <classpath refid="libjars" />
      <classpath path="${build.dir}/rhn.jar" />
      <formatter type="xml" usefile="true" />
      <formatter type="brief" usefile="false" />
      <batchtest todir="${tests.results.dir}">
        <zipfileset src="${build.dir}/rhn.jar" includes="${tests.include}" excludes="${tests.exclude}" />
      </batchtest>
    </junit>
  </target>
</project>
