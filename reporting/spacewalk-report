#!/usr/bin/python -u
#
# Copyright (c) 2008--2010 Red Hat, Inc.
#
# This software is licensed to you under the GNU General Public License,
# version 2 (GPLv2). There is NO WARRANTY for this software, express or
# implied, including the implied warranties of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2 # along with this software; if not, see
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
#
# Red Hat trademarks are not licensed under GPLv2. No permission is
# granted to use or replicate Red Hat trademarks that are incorporated
# in this software or its documentation.
#

import sys
def systemExit(code, msgs=None):
	""" exit with message and code """
	if msgs:
		if type(msgs) not in [type([]), type(())]:
			msgs = (msgs, )
		for msg in msgs:
			sys.stderr.write(str(msg)+'\n')
	sys.exit(code)

try:
	import os
	import csv
	from optparse import Option, OptionParser
	import errno
except KeyboardInterrupt:
	systemExit(-1, "\nUser interrupted process.")


sys.path.append('/usr/share/spacewalk')
import reports

try:
	from spacewalk.server import rhnSQL
	from spacewalk.common.rhnConfig import initCFG
except KeyboardInterrupt:
	systemExit(-1, "\nUser interrupted process.")


def processCommandline():
	""" process the commandline """
	optionsTable = [
		Option('--multival-on-rows', action='store_true', dest='multivalonrows',
			help='if there are multiple values for certain field, repeat the rows'),
		Option('--multival-separator', action='store', dest='multivalseparator',
			default=';',
			help='if there are multiple values for certain field, separate them with this string' \
				' (unless --multival-on-rows)'),
		Option('--db', action='store', type="string",
			help='alternative database string (username/password@sid);' \
				+ ' default is default_db from /etc/rhn/rhn.conf'),
		Option('--info', action='store_true',
			help='print synopsis of the report in the list of report, or description of individual reports specified'),
		Option('--list-fields', action='store_true',
			dest='listfields',
			help='list fields of the report instead of running the report'),
		Option('--list-fields-info', action='store_true',
			dest='listfieldsinfo',
			help='as --list-fields but also prints description for each column'),
	]

	optionParser = OptionParser( \
		usage="usage: %s [options] [report_name]" % sys.argv[0], \
		option_list=optionsTable)
	options, args = optionParser.parse_args()

	sys.argv[1:] = args

	return options

if __name__ == '__main__':
	options = processCommandline()

	try:
		if len(sys.argv) > 2:
			systemExit(-5, 'Only one report name expected.')
		if len(sys.argv) > 1:
			report_name = sys.argv[1]

			try:
				report = reports.report(report_name)
			except(reports.spacewalk_unknown_report):
				systemExit(-4, 'Unknown report [%s].' % report_name)

			need_exit = None
			if options.info:
				if report.synopsis != None:
					print report.synopsis
				else:
					print "No synopsis for report %s." % report_name
				if report.description != None:
					print
					print report.description
				need_exit = True

			if options.listfields or options.listfieldsinfo:
				if options.info:
					print
					print "Fields in the report:"
					print

				for c in report.columns:
					text = c
					if options.info:
						text = "    %s" % c
					if options.listfieldsinfo and report.column_descriptions.has_key(c) :
						text = "%s: %s" % ( text, report.column_descriptions[c] )
					print text
				need_exit = True

			if need_exit:
				sys.exit(0)

			initCFG('server')
			rhnSQL.initDB(options.db)

			writer = csv.writer(sys.stdout, lineterminator = "\n")

			h = rhnSQL.prepare(report.sql)
			h.execute()

			db_columns = map(lambda x: x[0].lower(), h.description)
			if db_columns != report.columns:
				systemExit(-3, \
					"Columns in report spec and in the database do not match:\nexpected %s\n     got %s" % ( report.columns, db_columns ))
			writer.writerow(report.columns)

			row = h.fetchone()
			prevrow = None
			outrow = None
			multival_dupes = {}
			while row != None:
				if options.multivalonrows or not report.multival_column_names.keys():
					writer.writerow(row)
					row = h.fetchone()
					continue

				if outrow != None:
					for m in report.multival_columns_stop:
						if prevrow[m] != row[m]:
							writer.writerow(outrow)
							outrow = None
							break

				if outrow != None:
					for m in report.multival_columns_reverted.keys():
						if prevrow[m] != row[m]:
							if not m in multival_dupes:
								multival_dupes[m] = {}
							if not row[m] in multival_dupes[m]:
								outrow[m] = str(outrow[m]) + options.multivalseparator + str(row[m])
								multival_dupes[m][row[m]] = 1
							break

				if outrow == None:
					outrow = []
					for x in row:
						if x is None:
							outrow.append(None)
						else:
							outrow.append(str(x))
					multival_dupes = {}

				prevrow = row
				row = h.fetchone()

			if outrow != None:
				writer.writerow(outrow)
		else:
			for report_name in sorted(reports.available_reports()):
				if options.info:
					synopsis = ''
					try:
						report = reports.report(report_name)
						synopsis = report.synopsis
					except:
						None
					print "%s: %s" % ( report_name, synopsis )
				else:
					print report_name

	except KeyboardInterrupt:
		systemExit(-1, "\nUser interrupted process.")
	except (rhnSQL.SQLError, rhnSQL.SQLSchemaError, rhnSQL.SQLConnectError), e:
		# really a stub for better exception handling in the future.
		sys.stderr.write("SQL error occurred, traceback follows...\n")
		raise
	except IOError, e:
		if e.errno == errno.EPIPE:
			sys.exit(0)
		else:
			raise

