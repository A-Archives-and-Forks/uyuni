#!/usr/bin/perl

use strict;
use NOCpulse::Config;
use Data::Dumper; # for debugging
use DBI;
use Getopt::Long;

my $DEBUG  = 1;
my $DRYRUN = 0;

my $rv = &GetOptions(
  'debug=i' => \$DEBUG,
  'dryrun+' => \$DRYRUN,
  'help+'   => sub {die &usage()},
) or die &usage();



# Set DB connect args
my $cargs = {
  AutoCommit  => 0,
  RaiseError  => 0,
  PrintError  => 0,
};


# Connect to the database
my $cdata = &connect_data_from_ini('cf_db');
my $dbh   = &connect($cdata, $cargs);


#------------------------------------------------------------------------------
# Insert code here

MAIN: {

  my $SCDB    = '/var/lib/nocpulse/scdb/bdb';
  my $TSDB    = '/var/lib/nocpulse/tsdb/bdb';


  # Fetch required data
  print "Getting list of scouts\n";
  my $scouts = &get_scouts($dbh);

  print "Getting list of remote scouts\n";
  my $rscouts = &get_remote_scouts($dbh);

  print "Getting list of active probes\n";
  my $probes  = &get_active_probes($dbh);

  print "Getting list of active URL probe steps\n";
  my $urlsteps = &get_active_url_probe_steps($dbh);



  # Generate file / directory name lists
  my %valid;
  print "Generating list of valid SCDB filenames\n";
  $valid{'scdb'} = &scdb_file_list($dbh, $rscouts, $probes);

  print "Generating list of valid TSDB directory names\n";
  $valid{'tsdb'} = &tsdb_dir_list($dbh, $rscouts, $probes);


  # Cull the herd

  print "Culling SCDB\n";
  &cull_scdb_files($SCDB, $valid{'scdb'});

  print "Culling TSDB (check probes)\n";
  &cull_tsdb_check_probes($TSDB, $valid{'tsdb'});

  print "Culling TSDB (URL probes)\n";
  &cull_tsdb_url_probes("$TSDB/LongLegs", $scouts, $urlsteps);

}


##########################
sub cull_tsdb_url_probes {
##########################
  my $dir     = shift;
  my $scouts  = shift;
  my $steps   = shift;

  my($vsc, $isc, $tvst, $tist) = (0) x 4;

  my %validscout; @validscout{@$scouts} = (1) x @$scouts;
  my %validstep;  @validstep{@$steps}   = (1) x @$steps;

  opendir(SCOUTS, "$dir") or die "Couldn't opendir($dir): $!";

  # Skip '.' and '..'
  scalar(readdir(SCOUTS)); scalar(readdir(SCOUTS)); 

  my $scid;
  while ($scid = readdir(SCOUTS)) {
    print "\tScout $scid ...\n";
    my($vst, $ist) = (0) x 2;

    if ($validscout{$scid}) {

      $vsc++;

      my $stepdir = "$dir/$scid";
      opendir(URLSTEPS, $stepdir) or die "Couldn't opendir($stepdir): $!";

      # Skip '.' and '..'
      scalar(readdir(URLSTEPS)); scalar(readdir(URLSTEPS)); 

      my $stepid;
      while ($stepid = readdir(URLSTEPS)) {
        if ($validstep{$stepid}) {
          $vst++;
        } else {
          $ist++;
          &nuke("$dir/$scid/$stepid");
        }
      }

      my $tst = $vst + $ist;
      print "\t\tScanned $tst steps, $vst valid, $ist invalid\n";

      $tvst += $vst;
      $tist += $ist;

      closedir(URLSTEPS);

    } else {
      $isc++;
      &nuke("$dir/$scid");
    }

  }

  closedir(SCOUTS);

  my $tsc = $vsc + $isc;
  my $tst = $tvst + $tist;
  print "Scanned $tsc scouts, $vsc valid, $isc invalid\n";
  print "Scanned $tst steps, $tvst valid, $tist invalid\n";


}




############################
sub cull_tsdb_check_probes {
############################
  my $dir     = shift;
  my $valid   = shift;

  my($file);
  my($tt, $tv, $ti) = (0) x 3;

  opendir(DIR, $dir) or die "Couldn't opendir($dir): $!";
  my @topdirs = grep(!/LongLegs|^\.\.?$/, readdir(DIR));
  closedir(DIR);

  foreach my $cid (@topdirs) {
    print "\t$cid ...\n";
    my($v, $i) = (0) x 2;

    opendir(DIR, "$dir/$cid") or die "Couldn't opendir($dir/$cid): $!";

    # Skip '.' and '..'
    scalar(readdir(DIR)); scalar(readdir(DIR)); 

    my $pid;
    while ($pid = readdir(DIR)) {
      if ($valid->{$cid}->{$pid}) {
        $v++;
      } else {
        $i++;
        &nuke("$dir/$cid/$pid");
      }
    }

    my $t = $v + $i;
    print "\t\tScanned $t dirs, $v valid, $i invalid\n";
    $tt += $t;
    $tv += $v;
    $ti += $i;

  }
  print "Scanned $tt total dirs, $tv valid, $ti invalid\n";

}





#####################
sub cull_scdb_files {
#####################
  my $dir   = shift;
  my $valid = shift;

  # Smoke any files in $dir that aren't $valid
  my($file);
  my($total, $v, $vl, $vd, $i, $il, $id) = (0) x 7;
  opendir(DIR, $dir) or die "Couldn't opendir($dir): $!";

  # Skip '.' and '..'
  scalar(readdir(DIR)); scalar(readdir(DIR)); 

  while ($file = readdir(DIR)) {
    $total++;
    if ($total % 10000 == 0) {
      print "\t$total files ...\n";
    }
    if ($valid->{$file}) {
      $v++;
      if ($file =~ /lock$/) {
        $vl++;
      } else {
        $vd++;
      }
    } else {
      unlink("$dir/$file") or warn "Couldn't unlink($dir/$file): $!";
      $i++;
      if ($file =~ /lock$/) {
        $il++;
      } else {
        $id++;
      }
    }
  }
  closedir(DIR);

  print "Scanned $total files:\n";
  print "\t$v valid ($vl locks, $vd data)\n";
  print "\t$i invalid ($il locks, $id data)\n";



}



####################
sub scdb_file_list {
####################
  my($dbh, $rscouts, $probes) = @_;
  my %files;

  # Regular probes:
  #   <PID> (file, plus .lock files)

  foreach my $probe (@{$probes->{'checks'}}) {
    my $fname = $probe->{'PROBE_ID'};
    $files{$fname}++;
    $files{"$fname.lock"}++;
  }


  # 
  # URL probes, LocalScout and RemoteScout:
  #   <PID>-<SCID> (file, plus .lock files)

  foreach my $pid (keys %{$probes->{'url_probe'}}) {
    my $basename = $pid;
    my $ls = $probes->{'url_probe'}->{$pid}->{'SAT_CLUSTER_ID'};
    my @scouts = @$rscouts;
    push(@scouts, $ls) if ($ls);
    foreach my $scid (@scouts) {
      $files{"$basename-$scid"}++;
      $files{"$basename-$scid.lock"}++;
    }

  }

  return \%files;
}




###################
sub tsdb_dir_list {
###################
  my($dbh, $rscouts, $probes) = @_;
  my %dirs;

  # Regular probes:
  #   <CUSTID>/<PID>/ (dir)

  foreach my $probe (@{$probes->{'checks'}}) {
    # Host probes don't produce TSDB data
    if ($probe->{'PROBE_TYPE'} ne 'host') {
      $dirs{$probe->{'CUSTOMER_ID'}}->{$probe->{'PROBE_ID'}}++;
    }
  }

  return \%dirs;

}



################
sub get_scouts {
################
  my $dbh = shift;

  # Get a list of valid probes
  my $sql = q{
    SELECT recid
    FROM   sat_cluster
  };

  return &do_fetch_flat($dbh, $sql);

}





#######################
sub get_remote_scouts {
#######################
  my $dbh = shift;

  # Get a list of valid probes
  my $sql = q{
    SELECT netsaint_id
    FROM   ll_netsaint
  };

  return &do_fetch_flat($dbh, $sql);

}


#######################
sub get_active_probes {
#######################
  my $dbh = shift;
  my %data;

  # Get three lists:

  #  1) active check and host probes
  print "\tFetching list of host/check probes ...\n" if ($DEBUG);
  my $sql = q{
    SELECT   recid as probe_id, customer_id, probe_type
    FROM     probe
    WHERE    probe_type = 'host'
    OR       probe_type = 'check'
  };

  $data{'checks'} = &do_fetch_hash($dbh, $sql);


  #  2) URL/Transaction probes
  print "\tFetching list of URL/Transaction probes ...\n" if ($DEBUG);
  $sql = q{
    SELECT   probe_id, sat_cluster_id
    FROM     url_probe
  };

  my $url_probes = &do_fetch_hash($dbh, $sql);
  my %url_probe;
  foreach my $rec (@$url_probes) {
    $url_probe{$rec->{'PROBE_ID'}} = $rec;
  }
  $data{'url_probe'} = \%url_probe;

  return \%data;
}




################################
sub get_active_url_probe_steps {
################################
  my $dbh = shift;

  my $sql = q{
    SELECT   recid
    FROM     url_probe_step
  };

  return &do_fetch_flat($dbh, $sql);

}





#################
sub list_probes {
#################
  my $dbh = shift;

  # Get a list of valid probes
  print "Fetching list of valid probes ...\n";
  my $sql = q{
    SELECT recid
    FROM   deployed_probe
      UNION ALL
    SELECT recid
    FROM   probe@cfdb
  };

  my $probes = &do_fetch_flat($dbh, $sql);
  my %valid_probe;
  @valid_probe{@$probes} = (1) x @$probes;

  print "\tGot ", scalar(@$probes), " records, ", 
        scalar(keys %valid_probe), " probes\n";

  return \%valid_probe;

}





###############
sub timestamp {
###############
  my $time = shift || time;
  my ($sec,$min,$hour,$mday,$mon,$year) = localtime($time);
  return sprintf("%04d-%02d-%02d", $year + 1900, $mon + 1, $mday);

}



##########
sub nuke {
##########
  my $doomed = shift;

  system("/bin/rm -rf $doomed");

}


#------------------------------------------------------------------------------

$dbh->disconnect() if (defined($dbh));


##############################################################################
###############################  Subroutines  ################################
##############################################################################

##############################################################################
# Utility methods for the migration

########################
sub make_single_decode {
########################
  my($map, $col, $keys) = @_;

  unless(defined($keys)) {
    $keys = [keys %$map];
  }


  my $decode = "DECODE($col,\n";
  foreach my $old (@$keys) {
    $decode .= 
      sprintf("\t%s, %s,\n", $old, $map->{$old});
  }
  $decode .= "\tNULL)";

  return $decode;
}


#################
sub make_decode {
#################
  my($map, $col) = @_;

  # The 'decode' function is limited to 255 args max (253 excluding
  # column and default == 126 pairs), so we need to break up the
  # decode expression into 126-pair chunks.

  my @keys = sort {$a <=> $b} keys %$map;

  my @chunks;
  while (@keys > 126) {
    my @chunk = splice(@keys, 0, 126);
    push(@chunks, \@chunk);
  }
  push(@chunks, \@keys);


  my $decode;

  if (@chunks == 1) {

    # Single chunk, single decode statement
    $decode = &make_single_decode($map, $col);

  } else {

    # Multiple chunks requiring multiple decodes

    # Done this way:
    #  DECODE (CASE WHEN $col <= $firstchunk THEN 0
    #               WHEN $col <= $second     THEN 1
    #               ...
    #               ELSE <n> END,
    #   0, DECODE($col, <first chunk>),
    #   1, DECODE($col, <second chunk>),
    #   ...
    #   N, DECODE($col, <final chunk>))

    my $caseno = 0;
    my @subdecodes;
    $decode = "DECODE(CASE\n";
    while (@chunks) {

      my $chunk = shift(@chunks);

      if (@chunks) {

        $decode .= "\tWHEN $col <= $chunk->[-1] THEN $caseno\n";

      } else {

        # Last chunk
        $decode .= "\tELSE $caseno END,\n";

      }
      
      my $subdecode = &make_single_decode($map, $col, $chunk);

      push(@subdecodes, $subdecode);

      $caseno++;

    }


    for (my $i = 0; $i < $caseno; $i++) {
      $decode .= sprintf("\t%d, %s,\n", $i, $subdecodes[$i]);
    }

    $decode .= "NULL)";

  }

  return $decode;
}





##############################################################################
# DB error handler methods

#########################
sub die_with_stacktrace {
#########################

  # Die on any error with a full stack trace
  use Carp;
  confess(shift);

}


##############################################################################
# Generic DB methods

###########################
sub connect_data_from_ini {
###########################
  my($db, $env) = @_;

  # Environment
  my $file;
  if ($env) {
    $file = "/etc/NOCpulse.ini.$env";
  } else {
    # Use installed NOCpulse.ini
    $file = "/etc/NOCpulse.ini";
  }
  my $cfg = new NOCpulse::Config($file) or die "Couldn't access $file: $!";
  &dprint(1, "Fetching config data from:  $file\n");

  #   Oracle environment
  my %cdata = (
    'dbname'   => $cfg->get($db,      'name'),
    'dbd'      => $cfg->get($db,      'dbd'),
    'username' => $cfg->get($db,      'username'),
    'password' => $cfg->get($db,      'password'),
    'orahome'  => $cfg->get('oracle', 'ora_home'),
  );

  return \%cdata;

}



#############
sub connect {
#############
  my($cdata, $cargs) = @_;

  $ENV{'ORACLE_HOME'} = $cdata->{'orahome'};  # base dir for Oracle

  #   Oracle environment
  my $dbd      = $cdata->{'dbd'};
  my $dbname   = $cdata->{'dbname'};
  my $username = $cdata->{'username'};
  my $password = $cdata->{'password'};
  my $orahome  = $cdata->{'dbname'};


  # Make DB connection
  &dprint(1, "Connecting as DBI:$dbd:$dbname, username $username\n");
  my $dbh = DBI->connect("DBI:$dbd:$dbname", $username, $password, $cargs);

  if (defined($dbh)) {
    &dprint(1, "Successfully connected to DB\n");
  } else {
    &bailout("ERROR:  connect failed: $DBI::errstr\n"); 
  }

  # Make sure we roll back and disconnect on ^C
  $SIG{'INT'} = sub {&bailout($dbh, @_)};

  return $dbh;

}



# Utility methods
sub do_sql          { unshift(@_, 'nonselect'); goto &do; } 
sub do_fetch        { unshift(@_, 'arrayref');  goto &do; }
sub do_fetch_hash   { unshift(@_, 'hash');      goto &do; }
sub do_fetch_ihash  { unshift(@_, 'ihash');     goto &do; }
sub do_fetch_flat   { unshift(@_, 'flat');      goto &do; }
sub do_fetch_single { unshift(@_, 'single');    goto &do; }


########
sub do {
########
  my($mode, $dbh, $sql, @args) = @_;

  my $index;
  if ($mode eq 'ihash') {
    $index = shift(@args);
  }

  if ($DRYRUN) {
    &dprint(2, "WOULD EXECUTE:  $sql");
  } else {
    &dprint(2, "EXECUTING:  $sql");
  }

  &dprint(2, " (@args)") if (@args);
  &dprint(2, "\n");

  # Run 'prepare' even for dry runs to validate SQL ...
  my $sth = $dbh->prepare($sql);

  # ... but don't execute
  return if ($DRYRUN);

  $sth->execute(@args);

  my $rv;

  if ($mode eq 'nonselect') {

    # On non-select statements, return the number of rows affected
    $rv = $sth->rows;

  } elsif ($mode eq 'arrayref') {

    # Arrayref
    $rv = $sth->fetchall_arrayref;

  } elsif ($mode eq 'hash') {

    # Array of records as hashes
    $rv = $sth->fetchall_arrayref({});

  } elsif ($mode eq 'ihash') {

    # Indexed hash
    $rv = $sth->fetchall_hashref(uc($index));

  } elsif ($mode eq 'single') {

    # Single element
    $rv = $sth->fetchall_arrayref->[0]->[0];

  } elsif ($mode eq 'flat') {

    # Flattened array
    my $arrayref = $sth->fetchall_arrayref;
    my @ary = map(@$_, @$arrayref);
    $rv = \@ary;

  }

  return $rv;


}





#############
sub bailout {
#############
  my $dbh = shift;

  # Use instead of 'exit' if $dbh is open
  if (defined($dbh)) {
    $dbh->rollback();   # in case there are any uncommitted changes
    $dbh->disconnect();
  }

  die @_;
}


############
sub dprint {
############
  my $level = shift;
  print @_ if ($level <= $DEBUG);
}


#################
sub hash_invert {
#################

  my($is_ref, $ref, %hashout);

  # Did we get a hash or a reference?
  if (ref($_[0])) {
    $is_ref = 1;
    $ref = shift;
  } else {
    $is_ref = 0;
    my %hashin = @_;
    $ref = \%hashin;
  }

  # Invert the hash
  my($key, $value);
  while (($key, $value) = each %$ref) {
    $hashout{$key} = $value;
  }

  # Return what we got
  if ($is_ref) {
    return \%hashout
  } else {
    return %hashout;
  }

}



###########
sub usage {
###########
  return qq{
Usage: $0 [<options>]
Options:
  --debug=<d> - set debug level to <d>
  --dryrun    - print, don't execute, SQL
  --help      - show this message
\n};
}
